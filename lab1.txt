{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "# NLP 2025\n",
    "# Lab 1: Tokenization\n",
    "\n",
    "Tokenization is a fundamental step in **Natural Language Processing (NLP)** 🧠💬 that transforms raw text into structured data for computational models. In this lab, you will explore different **tokenization techniques** 📝, preprocess text data 🔍, and implement **tokenization pipelines** using popular NLP libraries 🏗️.  \n",
    "\n",
    "You will also gain **hands-on experience** with **Hugging Face Datasets 🤗📚**, while assessing the impact of tokenization choices on downstream NLP tasks. \n",
    "\n",
    "By the end of this lab, you will have a **strong foundation** in tokenization techniques and be able to apply them effectively in **real-world NLP applications** 🌍.  \n",
    "\n",
    "---\n",
    "\n",
    "### 🎯 **Learning Goals**  \n",
    "\n",
    "By the end of this lab, you should be able to:  \n",
    "\n",
    "✅ **Understand the role of tokenization in NLP** 🧠💡  \n",
    "✅ **Explain why tokenization is important** and how it affects text processing 📖🔍  \n",
    "✅ **Implement different tokenization techniques** – Apply **word** 📝, **subword** 🔢, and **character-level** 🔠 tokenization using built-in libraries.  \n",
    "✅ **Use Hugging Face Datasets** 🤗📊 – Load and preprocess text datasets efficiently.  \n",
    "✅ **Evaluate tokenization impact** 📉🔎 – Analyze how different tokenization methods influence model performance.  \n",
    "✅ **Identify challenges in tokenization** ❗🔍 – Recognize issues like **out-of-vocabulary (OOV) words**, **ambiguity**, and **multilingual tokenization** 🌍.  \n",
    "\n",
    "### Score breakdown\n",
    "\n",
    "| Exercise            | Points |\n",
    "|---------------------|--------|\n",
    "| [Exercise 1](#e1)   | 5      |\n",
    "| [Exercise 2](#e2)   | 6      |\n",
    "| [Exercise 3](#e3)   | 5      |\n",
    "| [Exercise 4](#e4)   | 12     |\n",
    "| [Exercise 5](#e5)   | 5      |\n",
    "| [Exercise 6](#e6)   | 22     |\n",
    "| [Exercise 7](#e7)   | 5      |\n",
    "| [Exercise 8](#e8)   | 5      |\n",
    "| [Exercise 9](#e9)   | 10     |\n",
    "| [Exercise 10](#e10) | 25     |\n",
    "| Total               | 100    |\n",
    "\n",
    "This score will be scaled down to 0.5 and that will be your final lab score.\n",
    "\n",
    "### 📌 **Instructions for Delivery** (📅 **Deadline: 11/Apr 18:00**, 🎭 *wildcards possible*)  \n",
    "\n",
    "✅ **Submission Requirements**  \n",
    "+ 📄 You need to submit a **PDF of your report** (use the templates provided in **LaTeX** 🖋️ (*preferred*) or **Word** 📑) and a **copy of your notebook** 📓 with the code.  \n",
    "+ ⚡ Make sure that **all cells are executed properly** ⚙️ and that **all figures/results/plots** 📊 you include in the report are also visible in your **executed notebook**.  \n",
    "\n",
    "✅ **Collaboration & Integrity**  \n",
    "+ 🗣️ While you may **discuss** the lab with others, you must **write your solutions with your group only**. If you **discuss specific tasks** with others, please **include their names** in the appendix of the report.  \n",
    "+ 📜 **Honor Code applies** to this lab. For more details, check **Syllabus §7.2** ⚖️.  \n",
    "+ 📢 **Mandatory Disclosure**:  \n",
    "   - Any **websites** 🌐 (e.g., **Stack Overflow** 💡) or **other resources** used must be **listed and disclosed**.  \n",
    "   - Any **GenAI tools** 🤖 (e.g., **ChatGPT**) used must be **explicitly mentioned**.  \n",
    "   - 🚨 **Failure to disclose these resources is a violation of academic integrity**. See **Syllabus §7.3** for details.   "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "## Preparation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "# ! pip install -U datasets~=3.2.0\n",
    "# ! python -m pip install -U matplotlib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "import re\n",
    "from collections import Counter\n",
    "import numpy as np\n",
    "import datasets\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import tqdm"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "## 0. Intro to regular expressions\n",
    "\n",
    "In this introduction section, you can practice the use of regular expressions in python. You can find the documentation here: [https://docs.python.org/3/library/re.html](https://docs.python.org/3/library/re.html). The main functions of the re module are:\n",
    "- `re.search()` - searches for a pattern in a string, returns the first match,\n",
    "- `re.findall()` - similar to `search()`, but returns a list of all matches,\n",
    "- `re.sub()` - replaces the matches with a string.\n",
    "\n",
    "All above functions accept the regular expression pattern as their argument. The patterns are strings that represent the rules for matching the text. In python they start with `r` character, e.g. `r'\\d'` is a pattern that matches a digit.\n",
    "\n",
    "Let us start with a simple example. We will search for the word \"world\" in the string \"Hello, world!\"."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<re.Match object; span=(7, 12), match='world'>\n"
     ]
    }
   ],
   "source": [
    "text = \"Hello, world!, world im the worlds king of the world\"\n",
    "pattern = r'world'\n",
    "match = re.search(pattern, text)\n",
    "print(match)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "The `search()` function returns a match object that tells us where the match was found (`span` argument) and the exact part of the string that matched the pattern (`group` argument).\n",
    "\n",
    "Below you can find the examples from the lecture."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "# Disjunctions\n",
    "pattern = r'[wW]oodchuck' # matches both \"woodchuck\" and \"Woodchuck\"\n",
    "pattern = r'[1234567890]' # matches any digit\n",
    "pattern = r'[0-9]' # matches any digit\n",
    "pattern = r'[A-Z]' # matches any uppercase letter\n",
    "pattern = r'[a-z]' # matches any lowercase letter\n",
    "pattern = r'[A-Za-z]' # matches any letter\n",
    "\n",
    "# Disjunctions with pipe |\n",
    "pattern = r'groundhog|Woodchuck' # matches both \"woodchuck\" and \"Woodchuck\"\n",
    "\n",
    "# Negation (only when in [])\n",
    "pattern = r'[^0-9]' # matches any character that is not a digit\n",
    "pattern = r'[^Ss]' # matches any character that is not 'S' or 's'\n",
    "pattern = r'a^b' # matches the string \"a^b\"\n",
    "\n",
    "# Quantifiers (+, *, ?, .)\n",
    "pattern = r'baa+' # matches \"ba\" followed by one or more \"a\" (e.g. \"baa\", \"baaa\", \"baaaa\", ...)\n",
    "pattern = r'oo*h' # matches \"o\" followed by zero or more \"o\" and then \"h\" (e.g. \"oh\", \"ooh\", \"oooh\", ...)\n",
    "pattern = r'colou?r' # matches \"color\" and \"colour\"\n",
    "pattern = r'beg.n' # matches \"begun\", \"begin\", \"begnn\", ...\n",
    "\n",
    "# Anchors (^, $)\n",
    "pattern = r'^Hello' # matches \"Hello\" at the beginning of the string\n",
    "pattern = r'world!$' # matches \"world!\" at the end of the string"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "## 1. Huggingface datasets\n",
    "\n",
    "For this lab, we will use the **Hugging Face Datasets** library ([Hugging Face Datasets](https://huggingface.co/datasets)), which provides an extensive collection of ready-to-use NLP datasets. The library is designed to be lightweight, efficient, and compatible with popular deep learning frameworks such as PyTorch and TensorFlow.  \n",
    "\n",
    "You can find the full documentation and tutorials here:  \n",
    "📌 [Hugging Face Datasets Documentation](https://huggingface.co/docs/datasets/en/index)  \n",
    "\n",
    "### **Why use Hugging Face Datasets?**  \n",
    "- **Easy Access:** Load datasets with a single command without manual downloads.  \n",
    "- **Standardized Format:** Datasets come in a unified structure, making them easy to preprocess and integrate into ML pipelines.  \n",
    "- **Large Collection:** Provides datasets for a wide range of NLP tasks, including classification, translation, summarization, and more.  \n",
    "- **Seamless Integration:** Works with `transformers` and `sklearn` for preprocessing and model training.  \n",
    "\n",
    "### **Dataset for this lab: TweetEval - Emoji Subset**  \n",
    "\n",
    "In this lab, we will work with the **TweetEval** dataset, specifically the **emoji** subset. The TweetEval dataset is a benchmark for evaluating NLP models on Twitter-related tasks, covering tasks such as sentiment analysis, hate speech detection, and irony detection.  \n",
    "\n",
    "For tokenization, we will focus only on the **text** (the content of the tweets), but we will also examine the **labels** to understand the dataset structure.  \n",
    "\n",
    "🔗 The dataset description and details are available in its dataset card: [**TweetEval Dataset**](https://huggingface.co/datasets/cardiffnlp/tweet_eval) \n",
    "\n",
    "💡 Exploring More Datasets\n",
    "Hugging Face provides a vast selection of datasets across different NLP tasks. You can browse and explore more at:\n",
    "🔗 [Hugging Face Datasets Collection](https://huggingface.co/datasets)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DatasetDict({\n",
      "    train: Dataset({\n",
      "        features: ['text', 'label'],\n",
      "        num_rows: 45000\n",
      "    })\n",
      "    test: Dataset({\n",
      "        features: ['text', 'label'],\n",
      "        num_rows: 50000\n",
      "    })\n",
      "    validation: Dataset({\n",
      "        features: ['text', 'label'],\n",
      "        num_rows: 5000\n",
      "    })\n",
      "})\n"
     ]
    }
   ],
   "source": [
    "tweet_ds = datasets.load_dataset('tweet_eval', 'emoji')\n",
    "print(tweet_ds)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "The loaded dataset contains three subsets (“train”, “validation”, and “test”). Each consists of two columns: “text” and “label”. Label is an integer from 0 to 19 representing an emoji. See the dataset's card for more information. We can access the elements of the dataset like so:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'text': 'Sunday afternoon walking through Venice in the sun with @user ️ ️ ️ @ Abbot Kinney, Venice', 'label': 12}\n",
      "{'text': \"Time for some BBQ and whiskey libations. Chomp, belch, chomp! (@ Lucille's Smokehouse Bar-B-Que)\", 'label': 19}\n",
      "{'text': 'Love love love all these people ️ ️ ️ #friends #bff #celebrate #blessed #sundayfunday @ San…', 'label': 0}\n",
      "{'text': '️ ️ ️ ️ @ Toys\"R\"Us', 'label': 0}\n",
      "{'text': 'Man these are the funniest kids ever!! That face! #HappyBirthdayBubb @ FLIPnOUT Xtreme', 'label': 2}\n",
      "{'text': '#sandiego @ San Diego, California', 'label': 11}\n",
      "{'text': 'My little ️ ️ ️ ️ ️ #ObsessedWithMyDog @ Cafe Solstice Capitol Hill', 'label': 0}\n",
      "{'text': 'More #tinyepic things #tinyepicwestern, this one is crazy @user I may be one of your…', 'label': 19}\n",
      "{'text': 'Last night ️ @ Omnia Night Club At Caesars Palace', 'label': 0}\n",
      "{'text': 'friendship at its finest. ....#pixar #toystory #buzz #woody #friends #friendship #bff…', 'label': 7}\n"
     ]
    }
   ],
   "source": [
    "for i in range(10):\n",
    "    print(tweet_ds['train'][i])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "You can easily cast the dataset to the pandas DataFrame."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                                    text  label\n",
      "0      Sunday afternoon walking through Venice in the...     12\n",
      "1      Time for some BBQ and whiskey libations. Chomp...     19\n",
      "2      Love love love all these people ️ ️ ️ #friends...      0\n",
      "3                                    ️ ️ ️ ️ @ Toys\"R\"Us      0\n",
      "4      Man these are the funniest kids ever!! That fa...      2\n",
      "...                                                  ...    ...\n",
      "44995  Here to celebrate the Nunez wedding! Love my b...      0\n",
      "44996  1 night in Paris.... Wait... @ Paris Las Vegas...      1\n",
      "44997  Be safe this weekend everyone. #happylaborday ...     11\n",
      "44998          Pizza (@ Five50 - @user in Las Vegas, NV)      1\n",
      "44999  my mini is perfect, no one deserves her @ Las ...     13\n",
      "\n",
      "[45000 rows x 2 columns]\n"
     ]
    }
   ],
   "source": [
    "tweet_train_df = pd.DataFrame(tweet_ds['train'])\n",
    "print(tweet_train_df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "We can plot the distribution of the labels in the training subset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='label'>"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "tweet_train_df.groupby('label').count().plot.bar()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "### Dataset's filter function\n",
    "We can filter the examples using ```filter()``` method. See this link for more details https://huggingface.co/docs/datasets/en/use_dataset. Here is an example of filtering the short tweets (less than 20 characters) from the ```train``` subset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset({\n",
      "    features: ['text', 'label'],\n",
      "    num_rows: 506\n",
      "})\n"
     ]
    }
   ],
   "source": [
    "short_tweets = tweet_ds['train'].filter(lambda example: len(example['text']) < 20)\n",
    "print(short_tweets)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'text': '️ ️ ️ ️ @ Toys\"R\"Us', 'label': 0}\n",
      "{'text': '️ @ Columbia River', 'label': 12}\n",
      "{'text': 'My weekend: @user 3', 'label': 6}\n",
      "{'text': 'good day today', 'label': 3}\n",
      "{'text': 'My last RT...', 'label': 2}\n",
      "{'text': '@ On Lake Cowichan', 'label': 13}\n",
      "{'text': '@ Macroplaza', 'label': 4}\n",
      "{'text': '@ BART Train', 'label': 6}\n",
      "{'text': '️ 4 a tbh&amp; rate', 'label': 0}\n",
      "{'text': '@user Oh nice!!', 'label': 14}\n"
     ]
    }
   ],
   "source": [
    "for i in range(10):\n",
    "    print(short_tweets[i])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "### Dataset's map function\n",
    "Datasets library contains a very useful method map. It expects a function that will receive an example from the dataset. This function will be applied to all entries. We will calculate the length of the text (in characters) in each example."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "def calculate_text_length(example):\n",
    "    example['text_length'] = len(example['text'])\n",
    "    return example"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DatasetDict({\n",
      "    train: Dataset({\n",
      "        features: ['text', 'label', 'text_length'],\n",
      "        num_rows: 45000\n",
      "    })\n",
      "    test: Dataset({\n",
      "        features: ['text', 'label', 'text_length'],\n",
      "        num_rows: 50000\n",
      "    })\n",
      "    validation: Dataset({\n",
      "        features: ['text', 'label', 'text_length'],\n",
      "        num_rows: 5000\n",
      "    })\n",
      "})\n"
     ]
    }
   ],
   "source": [
    "tweet_ds = tweet_ds.map(calculate_text_length)\n",
    "print(tweet_ds)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "We can plot the histogram of the text lengths."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: ylabel='Frequency'>"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "pd.DataFrame(tweet_ds['train']).groupby('text_length')['text_length'].count().plot.hist(bins=50)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "<a name=\"e1\"></a>\n",
    "\n",
    "### Exercise 1: Questions about the datasets\n",
    "1. (1p) What is the size of the training, test and validation datasets?\n",
    "2. (1p) What are the top 5 most frequent emojis in the validation dataset?\n",
    "3. (1p) Compare the distributions of labels (emojis) between training and validation datasets.\n",
    "4. (1p) How many examples with the \"fire\" emoji are in the training dataset?\n",
    "5. (1p) What is the average length (in characters) of the tweets in the training dataset?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "You can add cells here to answer the questions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training set size: 45000\n",
      "Validation set size: 5000\n",
      "Test set size: 50000\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of examples with the 'fire' emoji (label 4) in the training dataset: 2146\n",
      "Average tweet length in the training dataset (in characters): 71.01691111111111\n"
     ]
    }
   ],
   "source": [
    "s_train = len(tweet_ds['train'])\n",
    "s_val = len(tweet_ds['validation'])\n",
    "s_test = len(tweet_ds['test'])\n",
    "\n",
    "print(\"Training set size:\", s_train)\n",
    "print(\"Validation set size:\", s_val)\n",
    "print(\"Test set size:\", s_test)\n",
    "print()\n",
    "#2\n",
    "\n",
    "tweet_val_df = pd.DataFrame(tweet_ds['validation'])\n",
    "top5_val = tweet_val_df['label'].value_counts().head(5)\n",
    "top5_val.sort_index().plot.bar(figsize=(8, 4), title=\"Top 5 Most Frequent Emojis in Validation Dataset\")\n",
    "plt.xlabel(\"Emoji Label\")\n",
    "plt.ylabel(\"Count\")\n",
    "plt.show()\n",
    "\n",
    "#3 \n",
    "train_counts = tweet_train_df['label'].value_counts().sort_index()\n",
    "val_counts = tweet_val_df['label'].value_counts().sort_index()\n",
    "\n",
    "plt.figure(figsize=(8, 4))\n",
    "train_counts.plot(kind='bar', title='Training Dataset: Emoji Label Distribution')\n",
    "plt.xlabel('Emoji Label')\n",
    "plt.ylabel('Count')\n",
    "plt.show()\n",
    "plt.figure(figsize=(8, 4))\n",
    "val_counts.plot(kind='bar', title='Validation Dataset: Emoji Label Distribution')\n",
    "plt.xlabel('Emoji Label')\n",
    "plt.ylabel('Count')\n",
    "plt.show()\n",
    "\n",
    "#4\n",
    "fire_count = sum(1 for ex in tweet_ds['train'] if ex['label'] == 4)\n",
    "print(\"Number of examples with the 'fire' emoji (label 4) in the training dataset:\", fire_count)\n",
    "#5\n",
    "\n",
    "avg_length = sum(len(ex['text']) for ex in tweet_ds['train']) / len(tweet_ds['train'])\n",
    "print(\"Average tweet length in the training dataset (in characters):\", avg_length)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "## 2. Tokenization\n",
    "\n",
    "In this section we will preprocess the dataset by cleaning and tokenizing the entries.\n",
    "Datasets library contains a very useful method map. It expects a function that will receive an example from the dataset. This function will be applied to all entries."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "### 2.1 Cleaning the text"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "<a name=\"e2\"></a>\n",
    "### Exercise 2: Write the text cleaning function\n",
    "\n",
    "Include at least the following steps:\n",
    "- (1p) remove comma between numbers, i.e. 15,000 -> 15000\n",
    "- (1p) remove multiple spaces\n",
    "- (1p) space out the punctuation (i.e. \"hello, world.\" -> \"hello , world .\")\n",
    "- (3x1p) three more cleaning steps of your choice"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "def clean(example):\n",
    "    \"\"\"\n",
    "    Cleans the example from the Dataset\n",
    "    Args:\n",
    "        example: an example from the Dataset\n",
    "\n",
    "    Returns: update example containing 'clean' column\n",
    "\n",
    "    \"\"\"\n",
    "    text = example['text']\n",
    "\n",
    "    # Empty text\n",
    "    if text == '':\n",
    "        example['clean'] = ''\n",
    "        return example\n",
    "\n",
    "    # 'text' from the example can be of type numpy.str_, let's convert it to a python str\n",
    "    text = str(text)\n",
    "\n",
    "    ### YOUR CODE HERE\n",
    "\n",
    "    # remove comma between numbers\n",
    "    text = re.sub(r'(\\d),(\\d)', r'\\1\\2', text)\n",
    "    # remove multiple spaces\n",
    "    text = re.sub(r'\\s+', ' ', text)\n",
    "    # space out the punctuation\n",
    "    text = re.sub(r'([,.!?;:])', r' \\1 ', text)\n",
    "    # three more cleaning steps of your choice\n",
    "    text = text.lower()\n",
    "    text = re.sub(r'([\\(\\)])', r' \\1 ', text)\n",
    "    text = re.sub(r'\\s+', ' ', text)\n",
    "\n",
    "    ### YOUR CODE ENDS HERE\n",
    "\n",
    "    # Update the example with the cleaned text\n",
    "    example['clean'] = text.strip()\n",
    "    return example"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "This is an example of applying the ```clean()``` function you just wrote to a single entry of the dataset. The function added a 'clean' field to the example."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original tweet item:\n",
      "Time for some BBQ and whiskey libations. Chomp, belch, chomp! (@ Lucille's Smokehouse Bar-B-Que)\n",
      "Cleaned tweet item:\n",
      "time for some bbq and whiskey libations . chomp , belch , chomp ! ( @ lucille's smokehouse bar-b-que )\n"
     ]
    }
   ],
   "source": [
    "print('Original tweet item:')\n",
    "print(tweet_ds['train'][1]['text'])\n",
    "print('Cleaned tweet item:')\n",
    "print(clean(tweet_ds['train'][1])['clean'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "Let's finally use the ```map()``` method and apply your `clean()` function to all entries of the dataset. You can see that the ```clean``` column has been added to each split."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "Below, we will apply your function to all entries in the dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DatasetDict({\n",
      "    train: Dataset({\n",
      "        features: ['text', 'label', 'text_length', 'clean'],\n",
      "        num_rows: 45000\n",
      "    })\n",
      "    test: Dataset({\n",
      "        features: ['text', 'label', 'text_length', 'clean'],\n",
      "        num_rows: 50000\n",
      "    })\n",
      "    validation: Dataset({\n",
      "        features: ['text', 'label', 'text_length', 'clean'],\n",
      "        num_rows: 5000\n",
      "    })\n",
      "})\n"
     ]
    }
   ],
   "source": [
    "tweet_ds = tweet_ds.map(clean)\n",
    "print(tweet_ds)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "### 2.2 Build vocabulary\n",
    "\n",
    "In the previous section, we implemented the cleaning of the dataset. Now, we will tokenize the text splitting it by spaces. We will build a vocabulary based on the cleaned text of the `train` split. We will investigate some properties of corpora (e.g. Zipf's law).\n",
    "\n",
    "The function below builds a vocabulary from the dataset. It counts the occurrences of the words in the dataset using the Counter class. Check the documentation here [collections.Counter](https://docs.python.org/3/library/collections.html#collections.Counter)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "### Exercise 3: Build the vocabulary\n",
    "(5p) Fill in the function below to build the vocabulary from the dataset. The function should return a `Counter` object with the words and their frequencies. The variable named `vocab` is already initialized as an empty `Counter` object."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "def build_vocab_counter(dataset):\n",
    "    \"\"\"\n",
    "    Builds a vocabulary from the dataset\n",
    "    Args:\n",
    "        dataset: a dataset\n",
    "\n",
    "    Returns: a vocabulary\n",
    "\n",
    "    \"\"\"\n",
    "    vocab = Counter()\n",
    "\n",
    "    ### YOUR CODE HERE\n",
    "    for example in dataset:\n",
    "        words = example['clean'].split()\n",
    "        \n",
    "        vocab.update(words)\n",
    "        \n",
    "    return vocab\n",
    "\n",
    "    ### YOUR CODE ENDS HERE\n",
    "    return vocab"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Size of the vocabulary: 68297\n"
     ]
    }
   ],
   "source": [
    "vocab_counter = build_vocab_counter(tweet_ds['train'])\n",
    "print('Size of the vocabulary:', len(vocab_counter))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "Because we created a counter, we can easily check the most and least common words in the vocabulary. Do the most common words make sense? How about the least common ones?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Most common:\n",
      "[('@', 24206), ('.', 23674), ('!', 16957), ('the', 13403), (',', 12384), ('@user', 12236), ('️', 9936), ('to', 7653), ('my', 7495), ('a', 6814)]\n",
      "Least common:\n",
      "[('#southbayla', 1), ('thedabberchick', 1), ('nector', 1), ('chefking1921express', 1), ('#alabama', 1), ('#rolltide', 1), ('#bffweekend', 1), ('nunez', 1), ('#happylaborday', 1), ('five50', 1)]\n"
     ]
    }
   ],
   "source": [
    "print('Most common:')\n",
    "print(vocab_counter.most_common(10))\n",
    "print('Least common:')\n",
    "print(vocab_counter.most_common()[-10:])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "We can also plot the counts of the words. You can check the [Power law](https://en.wikipedia.org/wiki/Power_law) if you are more interested."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'count')"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.loglog([val for word, val in vocab_counter.most_common()])\n",
    "plt.xlabel('rank')\n",
    "plt.ylabel('count')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "The plot shows that the distribution of the words in the vocabulary follows the Zipf's law. The most frequent word occurs approximately twice as often as the second most frequent word, three times as often as the third most frequent word, etc.\n",
    "\n",
    "We can also filter the vocabulary by the frequency of the words. We will only consider the most frequent words and mark the rest as the `<unk>` token. Here we set the maximum vocabulary size to 10,000. But in the later steps, you will experiment with different sizes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10000\n"
     ]
    }
   ],
   "source": [
    "max_vocab_size = 10000\n",
    "vocab = vocab_counter.most_common(max_vocab_size)\n",
    "# cast to list of words\n",
    "vocab = [word for word, _ in vocab]\n",
    "print(len(vocab))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "### Exercise 4: Frequency of pairs of words (bigrams)\n",
    "Calculate the frequency of (neighbouring) pairs of words in the training dataset.\n",
    "- (5p) List the most and least common pairs. Do the most common pairs make sense?\n",
    "- (2p) How many pairs occur only once in the dataset?\n",
    "- (5p) Plot the distribution of the pair frequencies."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Most common bigrams (top 10):\n",
      "('.', '.') : 7726\n",
      "('!', '!') : 4946\n",
      "(',', 'california') : 3339\n",
      "('️', '@') : 2966\n",
      "('️', '️') : 2240\n",
      "('&amp', ';') : 2019\n",
      "('los', 'angeles') : 1722\n",
      "('@', 'the') : 1621\n",
      "('@user', '@') : 1467\n",
      "('.', '@') : 1465\n",
      "\n",
      "Least common bigrams (10 examples):\n",
      "('through', 'venice') : 1\n",
      "('some', 'bbq') : 1\n",
      "('and', 'whiskey') : 1\n",
      "('whiskey', 'libations') : 1\n",
      "('libations', '.') : 1\n",
      "('.', 'chomp') : 1\n",
      "('chomp', ',') : 1\n",
      "(',', 'belch') : 1\n",
      "('belch', ',') : 1\n",
      "(',', 'chomp') : 1\n",
      "\n",
      "Number of bigrams that occur only once: 200730\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def get_bigrams(text):\n",
    "    \"\"\"\n",
    "    Splits the input text into words and returns a list of bigrams.\n",
    "    A bigram is a tuple consisting of two consecutive words.\n",
    "    \"\"\"\n",
    "    words = text.split()\n",
    "    return list(zip(words, words[1:]))\n",
    "\n",
    "bigram_counter = Counter()\n",
    "for example in tweet_ds['train']:\n",
    "    bigrams = get_bigrams(example['clean'])\n",
    "    bigram_counter.update(bigrams)\n",
    "\n",
    "# Print the top 10 most common bigrams\n",
    "print(\"Most common bigrams (top 10):\")\n",
    "for bigram, freq in bigram_counter.most_common(10):\n",
    "    print(bigram, \":\", freq)\n",
    "\n",
    "least_common = sorted(bigram_counter.items(), key=lambda x: x[1])[:10]\n",
    "print(\"\\nLeast common bigrams (10 examples):\")\n",
    "for bigram, freq in least_common:\n",
    "    print(bigram, \":\", freq)\n",
    "\n",
    "#2\n",
    "bigram_once_count = list(bigram_counter.values()).count(1)\n",
    "print(\"\\nNumber of bigrams that occur only once:\", bigram_once_count)\n",
    "#3\n",
    "\n",
    "freqs = list(bigram_counter.values())\n",
    "\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.hist(freqs, bins=50)\n",
    "plt.xlabel(\"Bigram Frequency\")\n",
    "plt.ylabel(\"Number of Bigram Pairs\")\n",
    "plt.title(\"Distribution of Bigram Frequencies (Log Scale)\")\n",
    "plt.yscale('log') \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "### 2.3 Tokenize the dataset\n",
    "The function below tokenizes the cleaned text (```example['clean']```) by splitting it on spaces. It replaces the words that are not in the vocabulary with the `<unk>` token."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "### Exercise 5: Tokenize the dataset\n",
    "\n",
    "(5p) Fill in the function below to tokenize the dataset. The function will be applied to the dataset through the `map()` method, so it returns the updated example. Your task is to split the text by spaces and replace the words that are not in the vocabulary with the `<unk>` token."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "def tokenize(example, vocab, unknown_token='<unk>'):\n",
    "    \"\"\"\n",
    "    Tokenizes the example from the Dataset\n",
    "    Args:\n",
    "        example: an example from the Dataset\n",
    "        vocab: a vocabulary as a list of words\n",
    "        unknown_token: a token to replace the words that are not in the vocabulary\n",
    "    Returns: update example containing 'tokens' column\n",
    "\n",
    "    \"\"\"\n",
    "    text = example['clean']\n",
    "    tokens = None # list of tokens, your code should fill this variable\n",
    "\n",
    "    ### YOUR CODE HERE\n",
    "    words = example['clean'].split()\n",
    "    \n",
    "    # Replace each word not found in the vocabulary with the <unk> token\n",
    "    tokens = [word if word in vocab else unknown_token for word in words]\n",
    "\n",
    "\n",
    "\n",
    "    ### YOUR CODE ENDS HERE\n",
    "\n",
    "    example['tokens'] = tokens\n",
    "    return example"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DatasetDict({\n",
      "    train: Dataset({\n",
      "        features: ['text', 'label', 'text_length', 'clean', 'tokens'],\n",
      "        num_rows: 45000\n",
      "    })\n",
      "    test: Dataset({\n",
      "        features: ['text', 'label', 'text_length', 'clean', 'tokens'],\n",
      "        num_rows: 50000\n",
      "    })\n",
      "    validation: Dataset({\n",
      "        features: ['text', 'label', 'text_length', 'clean', 'tokens'],\n",
      "        num_rows: 5000\n",
      "    })\n",
      "})\n"
     ]
    }
   ],
   "source": [
    "tweet_ds = tweet_ds.map(tokenize, fn_kwargs={'vocab': vocab})\n",
    "print(tweet_ds)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "Let us examine several entries from the dataset. We can see that the `tokens` column has been added to each example."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original tweet:\n",
      "Sunday afternoon walking through Venice in the sun with @user ️ ️ ️ @ Abbot Kinney, Venice\n",
      "Tokenized tweet:\n",
      "['sunday', 'afternoon', 'walking', 'through', 'venice', 'in', 'the', 'sun', 'with', '@user', '️', '️', '️', '@', 'abbot', 'kinney', ',', 'venice']\n",
      "Original tweet:\n",
      "Time for some BBQ and whiskey libations. Chomp, belch, chomp! (@ Lucille's Smokehouse Bar-B-Que)\n",
      "Tokenized tweet:\n",
      "['time', 'for', 'some', 'bbq', 'and', 'whiskey', 'libations', '.', '<unk>', ',', '<unk>', ',', '<unk>', '!', '(', '@', \"lucille's\", 'smokehouse', 'bar-b-que', ')']\n",
      "Original tweet:\n",
      "Love love love all these people ️ ️ ️ #friends #bff #celebrate #blessed #sundayfunday @ San…\n",
      "Tokenized tweet:\n",
      "['love', 'love', 'love', 'all', 'these', 'people', '️', '️', '️', '#friends', '#bff', '#celebrate', '#blessed', '#sundayfunday', '@', 'san…']\n",
      "Original tweet:\n",
      "️ ️ ️ ️ @ Toys\"R\"Us\n",
      "Tokenized tweet:\n",
      "['️', '️', '️', '️', '@', '<unk>']\n",
      "Original tweet:\n",
      "Man these are the funniest kids ever!! That face! #HappyBirthdayBubb @ FLIPnOUT Xtreme\n",
      "Tokenized tweet:\n",
      "['man', 'these', 'are', 'the', 'funniest', 'kids', 'ever', '!', '!', 'that', 'face', '!', '<unk>', '@', '<unk>', '<unk>']\n",
      "Original tweet:\n",
      "#sandiego @ San Diego, California\n",
      "Tokenized tweet:\n",
      "['#sandiego', '@', 'san', 'diego', ',', 'california']\n",
      "Original tweet:\n",
      "My little ️ ️ ️ ️ ️ #ObsessedWithMyDog @ Cafe Solstice Capitol Hill\n",
      "Tokenized tweet:\n",
      "['my', 'little', '️', '️', '️', '️', '️', '<unk>', '@', 'cafe', 'solstice', 'capitol', 'hill']\n",
      "Original tweet:\n",
      "More #tinyepic things #tinyepicwestern, this one is crazy @user I may be one of your…\n",
      "Tokenized tweet:\n",
      "['more', '<unk>', 'things', '<unk>', ',', 'this', 'one', 'is', 'crazy', '@user', 'i', 'may', 'be', 'one', 'of', 'your…']\n",
      "Original tweet:\n",
      "Last night ️ @ Omnia Night Club At Caesars Palace\n",
      "Tokenized tweet:\n",
      "['last', 'night', '️', '@', 'omnia', 'night', 'club', 'at', 'caesars', 'palace']\n",
      "Original tweet:\n",
      "friendship at its finest. ....#pixar #toystory #buzz #woody #friends #friendship #bff…\n",
      "Tokenized tweet:\n",
      "['friendship', 'at', 'its', 'finest', '.', '.', '.', '.', '.', '<unk>', '<unk>', '#buzz', '<unk>', '#friends', '#friendship', '#bff…']\n"
     ]
    }
   ],
   "source": [
    "for i in range(10):\n",
    "    print('Original tweet:')\n",
    "    print(tweet_ds['train'][i]['text'])\n",
    "    print('Tokenized tweet:')\n",
    "    print(tweet_ds['train'][i]['tokens'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "Make sure that the tokenization works as you intended. If not, revisit the cleaning and tokenization functions."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "### Exercise 6: Questions about the tokenization\n",
    "1. (3p) How many unknown tokens are in the validation dataset after tokenization?\n",
    "2. (3p) What is the distribution of the number of tokens in the training dataset?\n",
    "3. (4p) How the number of tokens corresponds to the number of characters in our dataset?\n",
    "4. (4p) How the size of the vocabulary (```max_vocab_size```) affects the number of unknown tokens?\n",
    "5. (4p) How does the size of the vocabulary affect the number of tokens in the dataset?\n",
    "6. (4p) Think about the advantages and disadvantages of the tokenization method we used. What are the cases when it will not work well?\n",
    "\n",
    "For answering these questions make sure to include a proper mix of numbers/plots/tables etc. and comments."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1. Unknown tokens in validation: 9263\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3. Correlation between characters and tokens: 0.7768251298124685\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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yaqb2IiI6PHGK9JERPeQkpKCAwcO4MMPP8SlS5dw+vRpWFtbV3ZaRERUBfCKNBHRPXz//fcYMmQIbt68iRUrVrCIJiIiBa9IExERERGZgFekiYiIiIhMwEKaiIiIiMgEfET4Q6TX63H+/HnY29vz0adEREREVZCIoKCgAF5eXjAzu/c1ZxbSD9H58+fh7e1d2WkQERER0X2cOXMGTzzxxD1jWEg/RPb29gD+OTEODg6VnA0RERER3Umn08Hb21up2+6FhfRDVDKdw8HBgYU0ERERURVmyDRc3mxIRERERGQCFtJERERERCZgIU1EREREZAIW0kREREREJmAhTURERERkAhbSREREREQmYCFNRERERGQCFtJERERERCZgIU1EREREZAIW0kREREREJmAhTURERERkAhbSREREREQmYCFNRERERGQCFtJERERERCZgIU1EREREZAIW0kREREREJmAhTURERERkAhbSREREREQmYCFNRERERGQCFtJERERERCZgIU1EREREZAIW0kREREREJmAhTURERERkAhbSREREREQmYCFNRERERGQCFtJERERERCZgIU1EREREZAIW0kREREREJmAhTURERERkAhbSREREREQmYCFNRERERGQCFtJERERERCZgIU1EREREZAIW0kREREREJmAhTURERERkAhbSREREREQmYCFNRERERGQCFtJERERERCao9EL63LlzePnll1GrVi3Y2NggKCgIv//+OwDg5s2biI6ORlBQEGrUqAEvLy8MHDgQ58+fV42Rk5ODyMhIODg4wMnJCVFRUbhy5Yoq5siRI+jQoQOsra3h7e2NWbNmlcolLi4OAQEBsLa2RlBQEDZt2qTqFxFMmjQJnp6esLGxQVhYGNLT08v5EyEiIiKi6qBSC+nc3Fy0a9cOlpaW+Pnnn5GamooPP/wQNWvWBABcu3YNBw8exMSJE3Hw4EGsWbMGaWlp6Nmzp2qcyMhI/PHHH4iPj8eGDRuwa9cuDB8+XOnX6XTo0qULfHx8cODAAcyePRuTJ09GbGysErN3715EREQgKioKhw4dQu/evdG7d2+kpKQoMbNmzcL8+fOxaNEiJCUloUaNGggPD8eNGzcq+JMiIiIioqpGIyJSWTt/++23kZCQgN27dxv8nv3796N169b466+/UKdOHRw7dgyNGzfG/v370apV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iYG5uTkiIiKUmJMnT2LXrl3YtGlTqfd36dIFjRs3xoABAzBr1ixkZ2fjvffew+uvv65cCX7ttdewYMECvPXWWxg6dCi2b9+O1atXY+PGjco4Y8aMwaBBg9CqVSu0bt0a8+bNw9WrVzFkyBAAgKOjI6KiojBmzBg4OzvDwcEBb7zxBkJDQw1esYOIiIiIHi2VWkifPXsWERERuHz5MlxdXdG+fXv89ttvqivPX3/9NZ544gl06dKl1PvNzc2xYcMGjBgxAqGhoahRowYGDRqEqVOnKjG+vr7YuHEjRo8ejY8//hhPPPEEvvzyS4SHhysx/fr1w99//41JkyYhOzsbzZs3x+bNm1U3IM6dOxdmZmZ44YUXUFhYiPDwcHz22WcV9MkQERERUVVXqetIP264jjQRERFR1Vat1pEmIiIiIqqOWEgTEREREZmAhTQRERERkQlYSBMRERERmYCFNBERERGRCVhIExERERGZgIU0EREREZEJWEgTEREREZmAhTQRERERkQlYSBMRERERmYCFNBERERGRCVhIExERERGZgIU0EREREZEJWEgTEREREZmAhTQRERERkQlYSBMRERERmYCFNBERERGRCVhIExERERGZgIU0EREREZEJWEgTEREREZnAorITeJyICABAp9NVciZEREREVJaSOq2kbrsXFtIPUUFBAQDA29u7kjMhIiIionspKCiAo6PjPWM0Yki5TeVCr9fj/PnzsLe3h0ajqex0Hgk6nQ7e3t44c+YMHBwcKjsdMhLPX/XHc1j98RxWbzx/5U9EUFBQAC8vL5iZ3XsWNK9IP0RmZmZ44oknKjuNR5KDgwO/QKoxnr/qj+ew+uM5rN54/srX/a5El+DNhkREREREJmAhTURERERkAhbSVK1ptVrExMRAq9VWdipkAp6/6o/nsPrjOazeeP4qF282JCIiIiIyAa9IExERERGZgIU0EREREZEJWEgTEREREZmAhTQRERERkQlYSFOlO3fuHF5++WXUqlULNjY2CAoKwu+//670iwgmTZoET09P2NjYICwsDOnp6aoxcnJyEBkZCQcHBzg5OSEqKgpXrlxRxRw5cgQdOnSAtbU1vL29MWvWrIdyfI+64uJiTJw4Eb6+vrCxsUH9+vXx/vvv4/b7mHkOq5Zdu3ahR48e8PLygkajwdq1a1X9D/N8xcXFISAgANbW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",
      "text/plain": [
       "<Figure size 800x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "6. Advantages:\n",
      " - Simple and computationally efficient.\n",
      " - Easy to implement, understand, and debug.\n",
      " - Works well when the text is clean and the vocabulary covers most frequent words.\n",
      "\n",
      "Disadvantages:\n",
      " - Out-of-vocabulary words are all replaced with <unk>, losing detail.\n",
      " - Does not capture subword or morphological features.\n",
      " - Sensitive to vocabulary size choice (rare words can get lost).\n"
     ]
    }
   ],
   "source": [
    "# 1. Count unknown tokens (<unk>) in the validation dataset.\n",
    "unknown_token = '<unk>'\n",
    "unknown_count = sum(token == unknown_token \n",
    "                    for example in tweet_ds['validation'] \n",
    "                    for token in example['tokens'])\n",
    "print(\"1. Unknown tokens in validation:\", unknown_count)\n",
    "\n",
    "# 2. Distribution of token counts per tweet in the training dataset.\n",
    "train_token_counts = [len(example['tokens']) for example in tweet_ds['train']]\n",
    "plt.figure(figsize=(8, 4))\n",
    "plt.hist(train_token_counts, bins=20, edgecolor='black')\n",
    "plt.xlabel(\"Tokens per Tweet\")\n",
    "plt.ylabel(\"Frequency\")\n",
    "plt.title(\"Distribution of Token Counts (Training)\")\n",
    "plt.show()\n",
    "\n",
    "# 3. Relationship between tweet length in characters and number of tokens.\n",
    "char_counts = [len(example['text']) for example in tweet_ds['train']]\n",
    "plt.figure(figsize=(8, 4))\n",
    "plt.scatter(char_counts, train_token_counts, alpha=0.5)\n",
    "plt.xlabel(\"Characters per Tweet\")\n",
    "plt.ylabel(\"Tokens per Tweet\")\n",
    "plt.title(\"Characters vs Tokens in Training Tweets\")\n",
    "plt.show()\n",
    "correlation = np.corrcoef(char_counts, train_token_counts)[0, 1]\n",
    "print(\"3. Correlation between characters and tokens:\", correlation)\n",
    "\n",
    "# 4. How vocabulary size affects the number of unknown tokens.\n",
    "# We test for different vocabulary sizes.\n",
    "vocab_sizes = [5000, 10000, 15000]\n",
    "unk_counts = []\n",
    "\n",
    "for vocab_size in vocab_sizes:\n",
    "    # Build vocabulary from training data (based on cleaned text).\n",
    "    counter = build_vocab_counter(tweet_ds['train'])\n",
    "    vocab_current = [word for word, _ in counter.most_common(vocab_size)]\n",
    "    \n",
    "    # Re-tokenize the validation set using the current vocabulary.\n",
    "    current_unk_count = 0\n",
    "    for ex in tweet_ds['validation']:\n",
    "        words = ex['clean'].split()\n",
    "        # Replace words not in the vocabulary.\n",
    "        tokens = [word if word in vocab_current else unknown_token for word in words]\n",
    "        current_unk_count += tokens.count(unknown_token)\n",
    "    \n",
    "    unk_counts.append(current_unk_count)\n",
    "\n",
    "plt.figure(figsize=(8, 4))\n",
    "plt.plot(vocab_sizes, unk_counts, marker='o')\n",
    "plt.xlabel(\"Vocabulary Size\")\n",
    "plt.ylabel(\"Unknown Token Count (Validation)\")\n",
    "plt.title(\"Vocabulary Size vs. Unknown Tokens\")\n",
    "plt.show()\n",
    "\n",
    "# 5. How vocabulary size affects the total number of tokens in the training dataset.\n",
    "total_tokens = []\n",
    "for vocab_size in vocab_sizes:\n",
    "    counter = build_vocab_counter(tweet_ds['train'])\n",
    "    vocab_current = [word for word, _ in counter.most_common(vocab_size)]\n",
    "    \n",
    "    token_sum = 0\n",
    "    for ex in tweet_ds['train']:\n",
    "        words = ex['clean'].split()\n",
    "        tokens = [word if word in vocab_current else unknown_token for word in words]\n",
    "        token_sum += len(tokens)\n",
    "    total_tokens.append(token_sum)\n",
    "\n",
    "plt.figure(figsize=(8, 4))\n",
    "plt.plot(vocab_sizes, total_tokens, marker='o')\n",
    "plt.xlabel(\"Vocabulary Size\")\n",
    "plt.ylabel(\"Total Token Count (Training)\")\n",
    "plt.title(\"Vocabulary Size vs. Total Token Count\")\n",
    "plt.show()\n",
    "\n",
    "# 6. Advantages and disadvantages of the tokenization method.\n",
    "print(\"\\n6. Advantages:\")\n",
    "print(\" - Simple and computationally efficient.\")\n",
    "print(\" - Easy to implement, understand, and debug.\")\n",
    "print(\" - Works well when the text is clean and the vocabulary covers most frequent words.\")\n",
    "\n",
    "print(\"\\nDisadvantages:\")\n",
    "print(\" - Out-of-vocabulary words are all replaced with <unk>, losing detail.\")\n",
    "print(\" - Does not capture subword or morphological features.\")\n",
    "print(\" - Sensitive to vocabulary size choice (rare words can get lost).\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "## 3. Byte Pair Encoding\n",
    "\n",
    "In this section, you will build the Byte Pair Encoding (BPE) tokenizer. BPE is an algorithm that replaces the most frequent pair of tokens (initially characters) with a new token. The algorithm is configured by the number of merges that are performed. You can find the paper here [Neural Machine Translation of Rare Words with Subword Units](https://arxiv.org/abs/1508.07909)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "### 3.1 Finding the initial set of characters\n",
    "BPE algorithm starts with the set of characters that occur in the dataset. We will build a character counter from the dataset."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "### Exercise 7: Counting the characters\n",
    "\n",
    "(5p) In this exercise, we build a counter with the frequencies of all characters in the dataset. Iterate over the dataset and count the characters in the `clean` column. The function returns a `Counter` object with the characters and their frequencies."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "def build_character_counter(dataset):\n",
    "    \"\"\"\n",
    "    Builds a character counter from the dataset\n",
    "    Args:\n",
    "        dataset: a dataset\n",
    "\n",
    "    Returns: a character counter\n",
    "\n",
    "    \"\"\"\n",
    "    char_counter = Counter()\n",
    "\n",
    "    ### YOUR CODE HERE\n",
    "    for example in dataset:\n",
    "        # Use the cleaned text from each example.\n",
    "        text = example['clean']\n",
    "        char_counter.update(text)\n",
    "    return char_counter\n",
    "\n",
    "\n",
    "    ### YOUR CODE ENDS HERE\n",
    "\n",
    "    return char_counter"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "The next cell applies the function to the training dataset and prints the size of the vocabulary and the most common characters."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "512\n",
      "[(' ', 551877), ('e', 263859), ('a', 222430), ('o', 191294), ('t', 187223), ('i', 176273), ('s', 172296), ('n', 157316), ('r', 152188), ('l', 122292), ('h', 106440), ('d', 81100), ('u', 79862), ('m', 73881), ('c', 73644), ('y', 70573), ('g', 62967), ('#', 56729), ('f', 54175), ('p', 51445), ('w', 47023), ('b', 46238), ('@', 36756), ('k', 31217), ('v', 30824), ('.', 23674), ('…', 19238), ('!', 16957), (',', 12384), ('️', 11733), (\"'\", 10108), ('j', 6660), ('x', 4469), ('1', 4449), ('z', 4402), ('-', 3827), ('2', 3592), ('0', 3541), (':', 2784), ('_', 2585), (';', 2354), ('(', 2298), ('\"', 2255), ('&', 2243), (')', 2092), ('q', 2078), ('6', 1852), ('/', 1711), ('?', 1624), ('5', 1561), ('3', 1430), ('4', 1096), ('7', 945), ('|', 908), ('9', 817), ('8', 761), ('•', 693), ('・', 642), ('*', 293), ('+', 288), ('$', 180), ('~', 156), ('—', 130), ('[', 127), ('é', 126), ('%', 126), (']', 118), ('=', 110), ('’', 84), ('“', 79), ('⠀', 74), ('{', 63), ('}', 53), ('ñ', 44), ('♡', 31), ('”', 28), ('о', 25), ('▃', 24), ('и', 23), ('͟', 18), ('\\\\', 18), ('р', 17), ('^', 17), ('ン', 15), ('▄', 15), ('н', 12), ('ا', 12), ('ᴵ', 12), ('а', 11), ('б', 10), ('ア', 10), ('¡', 10), ('ˢ', 10), ('á', 9), ('︎', 9), ('í', 9), ('к', 8), ('ー', 8), ('è', 8), ('φ', 8)]\n"
     ]
    }
   ],
   "source": [
    "char_counter = build_character_counter(tweet_ds['train'])\n",
    "print(len(char_counter))\n",
    "print(char_counter.most_common(100))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "We will filter the characters that occur less than 10 times in the dataset. We will also replace the space character with the `__` token. This is necessary because we want to preserve the spaces between the words in the tokenization process."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['__', '!', '\"', '#', '$', '%', '&', \"'\", '(', ')', '*', '+', ',', '-', '.', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '=', '?', '@', '[', '\\\\', ']', '^', '_', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '{', '|', '}', '~', '¡', 'é', 'ñ', 'ˢ', '͟', 'а', 'б', 'и', 'н', 'о', 'р', 'ا', 'ᴵ', '—', '’', '“', '”', '•', '…', '▃', '▄', '♡', '⠀', 'ア', 'ン', '・', '️']\n"
     ]
    }
   ],
   "source": [
    "bpe_init_vocab = sorted([char for char, _ in char_counter.most_common() if char_counter[char] >= 10])\n",
    "bpe_init_vocab[bpe_init_vocab.index(' ')] = '__'\n",
    "print(bpe_init_vocab)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "### 3.2 Training the BPE tokenizer\n",
    "\n",
    "In this section, we will implement the BPE algorithm. We will start by initializing the BPE corpus. The corpus is a list of words from the dataset with their frequency. This makes it easier to find the most frequent pairs of neighbouring tokens (or characters in the beginning). Each word is split into characters and the space (the ```__``` token) is added at the end of each word."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "def init_bpe_corpus(dataset):\n",
    "    \"\"\"\n",
    "    Initializes the BPE corpus\n",
    "    Args:\n",
    "        dataset: a dataset\n",
    "\n",
    "    Returns: a BPE corpus\n",
    "\n",
    "    \"\"\"\n",
    "\n",
    "    corpus = Counter()\n",
    "    for example in dataset:\n",
    "        words = example['clean'].split()\n",
    "        words = [' '.join(list(word)) + ' __' for word in words]\n",
    "        corpus.update(words)\n",
    "    return corpus"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "68297\n"
     ]
    }
   ],
   "source": [
    "bpe_corpus = init_bpe_corpus(tweet_ds['train'])\n",
    "print(len(bpe_corpus))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "We can check the most common words in the corpus along with their frequencies."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('@ __', 24206),\n",
       " ('. __', 23674),\n",
       " ('! __', 16957),\n",
       " ('t h e __', 13403),\n",
       " (', __', 12384),\n",
       " ('@ u s e r __', 12236),\n",
       " ('️ __', 9936),\n",
       " ('t o __', 7653),\n",
       " ('m y __', 7495),\n",
       " ('a __', 6814),\n",
       " ('i __', 6589),\n",
       " ('i n __', 5920),\n",
       " ('a n d __', 5588),\n",
       " ('y o u __', 5166),\n",
       " ('w i t h __', 5163),\n",
       " ('o f __', 5029),\n",
       " ('f o r __', 4737),\n",
       " ('t h i s __', 4490),\n",
       " ('c a l i f o r n i a __', 3915),\n",
       " ('a t __', 3576),\n",
       " ('i s __', 3467),\n",
       " ('l o v e __', 3046),\n",
       " ('… __', 2837),\n",
       " (': __', 2784),\n",
       " ('o n __', 2758),\n",
       " ('; __', 2354),\n",
       " ('( __', 2298),\n",
       " ('s o __', 2253),\n",
       " ('i t __', 2215),\n",
       " ('m e __', 2182)]"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bpe_corpus.most_common(30)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "Our BPE implementation will consist of the following steps:\n",
    "1. Calculate the frequency statistics of adjacent symbol pairs in the corpus.\n",
    "2. Find the most frequent pair.\n",
    "3. Merge the most frequent pair.\n",
    "4. Repeat until the specified number of merges is reached.\n",
    "\n",
    "The following function calculates the frequency statistics of adjacent symbol pairs in the corpus."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "### Exercise 8: Calculate the frequency statistics of adjacent symbol pairs\n",
    "(5p) Fill in the function below to calculate the frequency statistics of adjacent symbol pairs in the corpus. The function returns a Counter object with the counts of adjacent token pairs. The pairs are represented as tuples of two tokens (e.g., `('cali', 'for')`)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "def calculate_bpe_corpus_stats(corpus):\n",
    "    \"\"\"\n",
    "    Calculates the frequency statistics of adjacent symbol pairs in the corpus.\n",
    "    Args:\n",
    "        corpus: a BPE corpus as a Counter object with words split by space into tokens (initially characters)\n",
    "\n",
    "    Returns: a Counter object with the frequency statistics of adjacent symbol pairs\n",
    "    \"\"\"\n",
    "    stats = Counter()\n",
    "    \n",
    "    for word, freq in corpus.items():\n",
    "        symbols = word.split()\n",
    "        \n",
    "        for i in range(len(symbols) - 1):\n",
    "            pair = (symbols[i], symbols[i+1])\n",
    "            stats[pair] += freq\n",
    "    \n",
    "    return stats"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "We can check the most common pairs of characters in the initial corpus."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[(('e', '__'), 46280), (('t', 'h'), 30251), (('r', '__'), 25506), (('s', '__'), 24962), (('t', '__'), 24786), (('@', '__'), 24206), (('.', '__'), 23674), (('y', '__'), 21442), (('e', 'r'), 20476), (('h', 'e'), 19062)]\n"
     ]
    }
   ],
   "source": [
    "subset = Counter(dict(list(bpe_corpus.items())[:1000]))  # take a sample of 1000 cuz my pc cant handle all of it its more then 10min of waiting\n",
    "stats_subset = calculate_bpe_corpus_stats(subset)\n",
    "print(stats_subset.most_common(10))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "Next, we will implement the function that merges the most frequent pair of symbols in the corpus. The function takes the corpus and the most frequent pair of symbols as input and returns the updated corpus."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "def merge_corpus(corpus, pair):\n",
    "    \"\"\"\n",
    "    Merges the most frequent pair of symbols in the corpus.\n",
    "    Args:\n",
    "        corpus (dict): Keys are words as space-separated symbols (e.g., \"l o w\"),\n",
    "                       and values are the frequency counts.\n",
    "        pair (tuple): A pair of symbols to merge.\n",
    "    \n",
    "    Returns:\n",
    "        dict: Updated corpus after merging the pair of symbols.\n",
    "    \"\"\"\n",
    "    new_corpus = Counter()\n",
    "    bigram = ' '.join(pair)\n",
    "    replacement = ''.join(pair)\n",
    "    \n",
    "    # Process words in batches to reduce overhead\n",
    "    batch_size = 1000\n",
    "    words = list(corpus.items())\n",
    "    \n",
    "    for i in range(0, len(words), batch_size):\n",
    "        batch = words[i:i+batch_size]\n",
    "        for word, freq in batch:\n",
    "            # More efficient way to find and replace pairs\n",
    "            word_tokens = word.split()\n",
    "            i = 0\n",
    "            new_word = []\n",
    "            while i < len(word_tokens) - 1:\n",
    "                if word_tokens[i] == pair[0] and word_tokens[i+1] == pair[1]:\n",
    "                    new_word.append(replacement)\n",
    "                    i += 2\n",
    "                else:\n",
    "                    new_word.append(word_tokens[i])\n",
    "                    i += 1\n",
    "            \n",
    "            # Add the last token if it wasn't part of a pair\n",
    "            if i == len(word_tokens) - 1:\n",
    "                new_word.append(word_tokens[i])\n",
    "                \n",
    "            new_word = ' '.join(new_word)\n",
    "            new_corpus[new_word] += freq\n",
    "            \n",
    "    return new_corpus"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "The last step is to implement the BPE algorithm. The function takes the initial vocabulary, the corpus, and the number of merges as input. It returns the updated vocabulary, corpus, and the list of merges.\n",
    "Returning the list of merges is useful for the tokenization process - it makes it faster to tokenize the text. It contains the tuples of the two tokens that were merged. For example, ('to', 'day__') will merge the tokens 'to' and 'day__' into the 'today__' token."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "### Exercise 9: BPE algorithm\n",
    "\n",
    "(10p) Implement the BPE algorithm in the following function. The function should return the updated vocabulary, corpus, and the list of merges. The function should perform the specified number of merges. The vocabulary is a list of tokens, the corpus is a Counter object with the words split by space into tokens, and the merges is a list of tuples with the merged tokens.\n",
    "\n",
    "You should use the functions you implemented earlier in this section (```calculate_bpe_corpus_stats()```, ```merge_corpus()```)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "def bpe(vocab, corpus, num_merges):\n",
    "    \"\"\"\n",
    "    Applies the BPE algorithm to the corpus. Merges the most frequent adjacent symbol pairs.\n",
    "    The function performs the specified number of merges.\n",
    "    \n",
    "    Args:\n",
    "        vocab (list): A list of tokens representing the BPE vocabulary.\n",
    "        corpus (Counter): A Counter object with words split by space into tokens.\n",
    "        num_merges (int): The number of merges to perform.\n",
    "    \n",
    "    Returns:\n",
    "        list: Updated vocabulary.\n",
    "        Counter: Updated corpus.\n",
    "        list: List of merges.\n",
    "    \"\"\"\n",
    "    vocab = vocab.copy()\n",
    "    corpus = corpus.copy()\n",
    "    merges = []\n",
    "    \n",
    "    # Pre-compute initial stats outside the loop\n",
    "    stats = calculate_bpe_corpus_stats(corpus)\n",
    "    \n",
    "    for i in tqdm.tqdm(range(num_merges)):\n",
    "        if not stats:\n",
    "            print(f\"No more pairs to merge after {i} iterations\")\n",
    "            break  # Stop if no pairs are found\n",
    "        \n",
    "        # Select the most frequent pair\n",
    "        most_freq_pair, _ = stats.most_common(1)[0]\n",
    "        merges.append(most_freq_pair)\n",
    "        \n",
    "        # Merge this pair across the corpus\n",
    "        new_corpus = merge_corpus(corpus, most_freq_pair)\n",
    "        \n",
    "        # Create the new token by joining the symbols\n",
    "        new_token = ''.join(most_freq_pair)\n",
    "        if new_token not in vocab:\n",
    "            vocab.append(new_token)\n",
    "        \n",
    "        # Update corpus and recalculate stats\n",
    "        corpus = new_corpus\n",
    "        stats = calculate_bpe_corpus_stats(corpus)\n",
    "    \n",
    "    return vocab, corpus, merges"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "The following cell applies the BPE algorithm to the initial vocabulary and corpus. We will perform 100 merges at first, but you will experiment with different numbers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 100/100 [00:46<00:00,  2.15it/s]\n"
     ]
    }
   ],
   "source": [
    "bpe_vocab, updated_bpe_corpus, bpe_merges = bpe(bpe_init_vocab, bpe_corpus, num_merges=100)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "We can check the size of the BPE vocabulary and the most common tokens."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "193\n",
      "['__', '!', '\"', '#', '$', '%', '&', \"'\", '(', ')', '*', '+', ',', '-', '.', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '=', '?', '@', '[', '\\\\', ']', '^', '_', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '{', '|', '}', '~', '¡', 'é', 'ñ', 'ˢ', '͟', 'а', 'б', 'и', 'н', 'о', 'р', 'ا', 'ᴵ', '—', '’', '“', '”', '•', '…', '▃', '▄', '♡', '⠀', 'ア', 'ン', '・', '️', 'e__', 's__', 't__', 'th', 'er', 'in', 'y__', 'an', 'd__', 'or', 'a__', '@__', 'er__', '.__', 'on', 'o__', 'al', 'ou', 'ar', '…__', 'ing', 'en', 'us', '!__', 'st', 'ing__', 're', 'ch', 'the__', 'lo', ',__', 'user__', 'l__', '@user__', 'at', 'for', 'am', 'da', 'el', 'it', '️__', 'om', 'ri', 'be', 'k__', 'on__', 'is__', 'la', 'ho', 'to__', 'ni', 'i__', 'in__', 'es__', 'ha', 'you', 'es']\n"
     ]
    }
   ],
   "source": [
    "print(len(bpe_vocab))\n",
    "print(bpe_vocab[:150])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "We can also check the most common merges."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[('e', '__'), ('s', '__'), ('t', '__'), ('t', 'h'), ('e', 'r'), ('i', 'n'), ('y', '__'), ('a', 'n'), ('d', '__'), ('o', 'r'), ('a', '__'), ('@', '__'), ('er', '__'), ('.', '__'), ('o', 'n'), ('o', '__'), ('a', 'l'), ('o', 'u'), ('a', 'r'), ('…', '__'), ('in', 'g'), ('e', 'n'), ('u', 's'), ('!', '__'), ('s', 't'), ('ing', '__'), ('r', 'e'), ('c', 'h'), ('th', 'e__'), ('l', 'o'), (',', '__'), ('us', 'er__'), ('l', '__'), ('@', 'user__'), ('a', 't'), ('f', 'or'), ('a', 'm'), ('d', 'a'), ('e', 'l'), ('i', 't'), ('️', '__'), ('o', 'm'), ('r', 'i'), ('b', 'e'), ('k', '__'), ('on', '__'), ('i', 's__'), ('l', 'a'), ('h', 'o'), ('t', 'o__'), ('n', 'i'), ('i', '__'), ('in', '__'), ('e', 's__'), ('h', 'a'), ('y', 'ou'), ('e', 's'), ('an', 'd__'), ('l', 'i'), ('o', 'f'), ('m', 'y__'), ('o', 'o'), ('p', '__'), ('v', 'e__'), ('w', 'i'), ('da', 'y__'), ('i', 's'), ('i', 'c'), ('th', '__'), ('a', 't__'), ('i', 'l'), ('w', '__'), ('i', 'r'), ('u', 'n'), ('g', 'h'), ('a', 's__'), ('c', 'al'), ('n', 'e'), ('a', 's'), ('#', 's'), ('an', '__'), ('a', 'c'), ('r', 'o'), ('t', 'i'), ('t', 'o'), ('you', '__'), ('l', 'e'), ('wi', 'th__'), ('of', '__'), ('u', 'r'), ('e', 'd__'), ('cal', 'i'), ('a', 'd'), ('ch', '__'), ('for', '__'), ('cali', 'for'), ('califor', 'ni'), ('p', 'p'), (\"'\", 's__'), ('th', 'is__')]\n"
     ]
    }
   ],
   "source": [
    "print(bpe_merges[:150])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "### 3.3 Tokenizing the text using BPE\n",
    "\n",
    "With the tokenizer trained we can now tokenize the text using the BPE vocabulary. We will first build a function that tokenizes any text using our BPE tokenizer (vocabulary and merges). Next we will apply it to our dataset.\n",
    "\n",
    "The following function tokenizes the text using the BPE vocabulary. It replaces the most frequent pairs of tokens with the new token. The function also replaces the tokens that are not in the vocabulary with the `<unk>` token."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['s', 'un', 'day__', 'a', 'f', 't', 'er', 'n', 'o', 'on__', 'w', 'al', 'k', 'ing__', 'th', 'r', 'ou', 'gh', '__', 'v', 'en', 'ic', 'e__', 'in__', 'the__', 's', 'un', '__', 'with__', '@user__', '️__', '️__', '️__', '@__', 'a', 'b', 'b', 'o', 't__', 'k', 'in', 'ne', 'y__', ',__', 'v', 'en', 'ic', 'e__', '<unk>']\n"
     ]
    }
   ],
   "source": [
    "def apply_bpe_tokenization(text, vocab, merges, unk_token='<unk>'):\n",
    "    \"\"\"\n",
    "    Tokenizes the text using BPE vocabulary, preserving spaces as '__'.\n",
    "\n",
    "    Args:\n",
    "        text (str): The input text to be tokenized.\n",
    "        vocab (set): A set containing the BPE vocabulary tokens.\n",
    "\n",
    "    Returns:\n",
    "        list: A list of tokens representing the input text.\n",
    "    \"\"\"\n",
    "\n",
    "    words = re.split(r'\\s', text)\n",
    "    words = [' ' + ' '.join(list(word)) + (' __ ' if i < len(words) - 1 else ' ') for i, word in enumerate(words)]\n",
    "\n",
    "    bpe_tokens = []\n",
    "\n",
    "    for i, word in enumerate(words):\n",
    "        for merge in merges:\n",
    "            word = word.replace(' ' + ' '.join(merge) + ' ', ' ' + ''.join(merge) + ' ')\n",
    "        bpe_tokens.extend(word.split())\n",
    "\n",
    "    for i, token in enumerate(bpe_tokens):\n",
    "        if token not in vocab:\n",
    "            bpe_tokens[i] = unk_token\n",
    "    return bpe_tokens\n",
    "\n",
    "\n",
    "# A test example with a special character. Is the character tokenized correctly as <unk> token?\n",
    "print(apply_bpe_tokenization(tweet_ds['train'][0]['clean'] + ' 🇺', bpe_vocab, bpe_merges))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "The function below will apply our BPE tokenizer to the dataset. It will add a new column `bpe_tokens` to each example."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "e98ddae6a2404a94bffe6b95bb1e61e1",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Map:   0%|          | 0/45000 [00:00<?, ? examples/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "c7510720e1bc4dce96fb381e23e253ec",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Map:   0%|          | 0/50000 [00:00<?, ? examples/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "4e63d34e18c84325bdf14bd9200d254a",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Map:   0%|          | 0/5000 [00:00<?, ? examples/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DatasetDict({\n",
      "    train: Dataset({\n",
      "        features: ['text', 'label', 'text_length', 'clean', 'tokens', 'bpe_tokens'],\n",
      "        num_rows: 45000\n",
      "    })\n",
      "    test: Dataset({\n",
      "        features: ['text', 'label', 'text_length', 'clean', 'tokens', 'bpe_tokens'],\n",
      "        num_rows: 50000\n",
      "    })\n",
      "    validation: Dataset({\n",
      "        features: ['text', 'label', 'text_length', 'clean', 'tokens', 'bpe_tokens'],\n",
      "        num_rows: 5000\n",
      "    })\n",
      "})\n"
     ]
    }
   ],
   "source": [
    "def tokenize_bpe(example, vocab, merges, unk_token='<unk>'):\n",
    "    \"\"\"\n",
    "    Tokenizes the example from the Dataset using BPE\n",
    "    Args:\n",
    "        example: an example from the Dataset\n",
    "        vocab: a BPE vocabulary\n",
    "\n",
    "    Returns: update example containing 'bpe_tokens' column\n",
    "\n",
    "    \"\"\"\n",
    "    text = example['clean']\n",
    "    bpe_tokens = apply_bpe_tokenization(text, vocab, merges, unk_token)\n",
    "    example['bpe_tokens'] = bpe_tokens\n",
    "    return example\n",
    "\n",
    "tweet_ds = tweet_ds.map(tokenize_bpe, fn_kwargs={'vocab': bpe_vocab, 'merges': bpe_merges})\n",
    "print(tweet_ds)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "We will inspect the both tokenizations of several examples from the ```validation``` subset. Try to find the ```<unk>``` tokens in the printed examples."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original tweet:\n",
      "A little throwback with my favourite person @ Water Wall\n",
      "Word tokenization:\n",
      "['a', 'little', 'throwback', 'with', 'my', 'favourite', 'person', '@', 'water', 'wall']\n",
      "BPE tokenization:\n",
      "['a__', 'l', 'it', 't', 'l', 'e__', 'th', 'ro', 'w', 'b', 'ac', 'k__', 'with__', 'my__', 'f', 'a', 'v', 'ou', 'r', 'it', 'e__', 'p', 'er', 's', 'on__', '@__', 'w', 'at', 'er__', 'w', 'al', 'l']\n",
      "\n",
      "Original tweet:\n",
      "glam on @user yesterday for #kcon makeup using @user in #featherette,…\n",
      "Word tokenization:\n",
      "['glam', 'on', '@user', 'yesterday', 'for', '<unk>', 'makeup', 'using', '@user', 'in', '<unk>', ',', '…']\n",
      "BPE tokenization:\n",
      "['g', 'l', 'am', '__', 'on__', '@user__', 'y', 'e', 'st', 'er', 'day__', 'for__', '#', 'k', 'c', 'on__', 'm', 'a', 'k', 'e', 'u', 'p__', 'us', 'ing__', '@user__', 'in__', '#', 'f', 'e', 'a', 'th', 'er', 'e', 't', 't', 'e__', ',__', '…']\n",
      "\n",
      "Original tweet:\n",
      "Democracy Plaza in the wake of a stunning outcome #Decision2016 @ NBC News\n",
      "Word tokenization:\n",
      "['<unk>', 'plaza', 'in', 'the', 'wake', 'of', 'a', 'stunning', '<unk>', '<unk>', '@', '<unk>', 'news']\n",
      "BPE tokenization:\n",
      "['d', 'e', 'm', 'o', 'c', 'r', 'ac', 'y__', 'p', 'la', 'z', 'a__', 'in__', 'the__', 'w', 'a', 'k', 'e__', 'of__', 'a__', 'st', 'un', 'n', 'ing__', 'ou', 't', 'c', 'om', 'e__', '#', 'd', 'e', 'c', 'is', 'i', 'on', '2', '0', '1', '6', '__', '@__', 'n', 'b', 'c', '__', 'ne', 'w', 's']\n",
      "\n",
      "Original tweet:\n",
      "Then &amp; Now. VILO @ Walt Disney Magic Kingdom\n",
      "Word tokenization:\n",
      "['then', '&amp', ';', 'now', '.', '<unk>', '@', 'walt', 'disney', 'magic', 'kingdom']\n",
      "BPE tokenization:\n",
      "['th', 'en', '__', '&', 'am', 'p__', ';', '__', 'n', 'o', 'w__', '.__', 'v', 'il', 'o__', '@__', 'w', 'al', 't__', 'd', 'is', 'ne', 'y__', 'm', 'a', 'g', 'ic', '__', 'k', 'ing', 'd', 'om']\n",
      "\n",
      "Original tweet:\n",
      "Who never... @ A Galaxy Far Far Away\n",
      "Word tokenization:\n",
      "['who', 'never', '.', '.', '.', '@', 'a', 'galaxy', 'far', 'far', 'away']\n",
      "BPE tokenization:\n",
      "['w', 'h', 'o__', 'ne', 'v', 'er__', '.__', '.__', '.__', '@__', 'a__', 'g', 'al', 'a', 'x', 'y__', 'f', 'ar', '__', 'f', 'ar', '__', 'a', 'w', 'a', 'y']\n",
      "\n",
      "Original tweet:\n",
      "Dinner in FLA tonight // Pan-seared salmon over couscous veggie salad #yum #dinner #florida #salmon…\n",
      "Word tokenization:\n",
      "['dinner', 'in', '<unk>', 'tonight', '//', '<unk>', 'salmon', 'over', '<unk>', 'veggie', 'salad', '#yum', '#dinner', '<unk>', '<unk>']\n",
      "BPE tokenization:\n",
      "['d', 'in', 'n', 'er__', 'in__', 'f', 'l', 'a__', 't', 'on', 'i', 'gh', 't__', '/', '/', '__', 'p', 'an', '-', 's', 'e', 'ar', 'ed__', 's', 'al', 'm', 'on__', 'o', 'v', 'er__', 'c', 'ou', 's', 'c', 'ou', 's__', 'v', 'e', 'g', 'g', 'i', 'e__', 's', 'al', 'a', 'd__', '#', 'y', 'u', 'm', '__', '#', 'd', 'in', 'n', 'er__', '#', 'f', 'l', 'or', 'i', 'd', 'a__', '#s', 'al', 'm', 'on', '…']\n",
      "\n",
      "Original tweet:\n",
      "It's my fav seniors last game congrats on beating west @ West Salem…\n",
      "Word tokenization:\n",
      "[\"it's\", 'my', 'fav', 'seniors', 'last', 'game', 'congrats', 'on', 'beating', 'west', '@', 'west', '<unk>']\n",
      "BPE tokenization:\n",
      "['it', \"'s__\", 'my__', 'f', 'a', 'v', '__', 's', 'en', 'i', 'or', 's__', 'la', 's', 't__', 'g', 'am', 'e__', 'c', 'on', 'g', 'r', 'at', 's__', 'on__', 'be', 'at', 'ing__', 'w', 'es', 't__', '@__', 'w', 'es', 't__', 's', 'al', 'e', 'm', '…']\n",
      "\n",
      "Original tweet:\n",
      "I got to to go formal with my best friend @ Phi Mu at JSU\n",
      "Word tokenization:\n",
      "['i', 'got', 'to', 'to', 'go', 'formal', 'with', 'my', 'best', 'friend', '@', 'phi', 'mu', 'at', '<unk>']\n",
      "BPE tokenization:\n",
      "['i__', 'g', 'o', 't__', 'to__', 'to__', 'g', 'o__', 'for', 'm', 'al', '__', 'with__', 'my__', 'be', 's', 't__', 'f', 'ri', 'en', 'd__', '@__', 'p', 'h', 'i__', 'm', 'u', '__', 'at__', 'j', 's', 'u']\n",
      "\n",
      "Original tweet:\n",
      "'Cause I Miss My Little Homies .#Throwback #CousinLove @ Indiana University\n",
      "Word tokenization:\n",
      "['<unk>', 'i', 'miss', 'my', 'little', 'homies', '.', '#throwback', '#cousinlove', '@', '<unk>', 'university']\n",
      "BPE tokenization:\n",
      "[\"'\", 'c', 'a', 'us', 'e__', 'i__', 'm', 'is', 's__', 'my__', 'l', 'it', 't', 'l', 'e__', 'h', 'om', 'i', 'es__', '.__', '#', 'th', 'ro', 'w', 'b', 'ac', 'k__', '#', 'c', 'ou', 's', 'in', 'lo', 've__', '@__', 'in', 'd', 'i', 'an', 'a__', 'u', 'ni', 'v', 'er', 's', 'it', 'y']\n",
      "\n",
      "Original tweet:\n",
      "Birthday Kisses @ Madison, Wisconsin\n",
      "Word tokenization:\n",
      "['birthday', 'kisses', '@', 'madison', ',', '<unk>']\n",
      "BPE tokenization:\n",
      "['b', 'ir', 'th', 'day__', 'k', 'is', 's', 'es__', '@__', 'm', 'ad', 'is', 'on__', ',__', 'wi', 's', 'c', 'on', 's', 'in']\n",
      "\n"
     ]
    }
   ],
   "source": [
    "for i in range(10):\n",
    "    print('Original tweet:')\n",
    "    print(tweet_ds['validation'][i]['text'])\n",
    "    print('Word tokenization:')\n",
    "    print(tweet_ds['validation'][i]['tokens'])\n",
    "    print('BPE tokenization:')\n",
    "    print(tweet_ds['validation'][i]['bpe_tokens'])\n",
    "    print()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "### Exercise 10: Comparing tokenizers\n",
    "\n",
    "Train the BPE tokenizer with different number of merges. Compare the tokenization results with the word tokenization.\n",
    "1. (5p) What are the differences?\n",
    "2. (5p) Compare the number of tokens created by your tokenizers.\n",
    "3. (5p) Calculate the number of `<unk>` tokens in the validation dataset for each tokenizer.\n",
    "4. (5p) Compare the average length in tokens between different tokenizers.\n",
    "5. (5p) What are the advantages and disadvantages of the BPE tokenizer?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "For answering these questions make sure to include a proper mix of numbers/plots/tables etc. and comments."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 50/50 [00:27<00:00,  1.82it/s]\n",
      "100%|██████████| 100/100 [00:57<00:00,  1.75it/s]\n",
      "100%|██████████| 200/200 [01:35<00:00,  2.10it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Word-level Tokenization (Validation):\n",
      " Average number of tokens: 12.55\n",
      " Total '<unk>' tokens: 9263\n",
      "\n",
      "BPE Tokenization Results:\n",
      " 50 merges: Average tokens = 47.68, <unk> count = 95\n",
      " 100 merges: Average tokens = 41.50, <unk> count = 95\n",
      " 200 merges: Average tokens = 36.28, <unk> count = 95\n"
     ]
    },
    {
     "data": {
      "image/png": "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zzdFFiIiIiKiR1J9cda9e/fw/fffY/PmzQgODoadnZ3B/ClTphgtHBERERFRHtWF68mTJ1GjRg0AwLlz5wzmaTQa46QiIiIiInqI6sJ169atpshBRERERPRYRR4OKyYmBhs3bkRGRgYAQESMFoqIiIiI6GGqC9ebN2+iadOmqFy5Mlq1aoXr168DuH971vfff9/oAYmIiIiIgCIUrkOGDIGlpSXi4uJga2urtHfq1AkbNmwwajgiIiIiojyq+7j++eef2LhxI8qXL2/QXqlSJVy+fNlowYiIiIiIHqT6jOudO3cMzrTmuXXrFrRarVFCERERERE9THXh2qBBA/z444/KtEajgV6vx6RJk9CkSROjhiMiIiIiyqO6q8CkSZPQtGlT/P3338jOzsbw4cNx6tQp3Lp1C7t37zZFRiIiIiIi9Wdcq1SpgnPnzqF+/fp49dVXcefOHbz++us4cuQIfH19TZGRiIiIiEj9GVcAcHR0xMcff2zsLERERGRm4uLikJSUVNwxyATKli0LLy+v4o5hoEiF6+3btzF//nycOXMGABAUFIRevXrBycnJqOGIiIjo2RUXF4eAwEBk3L1b3FHIBGxsbXH2zJlnqnhVXbju2LEDbdu2haOjI2rWrAkA+OabbzBu3Dj8/vvvaNiwodFDEhER0bMnKSkJGXfvouOE2XDxqVTccciIEmPPY/nI/khKSjLvwjUiIgKdOnXC7NmzYWFhAQDIzc3Fe++9h4iICJw4ccLoIYmIiOjZ5eJTCeUCqxV3DHoOqL44KyYmBu+//75StAKAhYUFoqKiEBMTY9RwRERERER5VBeuNWrUUPq2PujMmTOoVo1/bRERERGRaajuKjBw4EAMGjQIMTExqFu3LgBg3759mDlzJj7//HMcP35cWbZq1arGS0pEREREzzXVhWuXLl0AAMOHDy9wnkajgYhAo9EgNzf36RMSEREREaEIhWtsbKwpchARERERPZbqwtXb29sUOYiIiIiIHkv1xVlERERERMWBhSsRERERmQUWrkRERERkFli4EhEREZFZUF24XrlyBf/8848yfeDAAQwePBhz5841ajAiIiIiogepLly7du2KrVu3AgDi4+PRvHlzHDhwAB9//DHGjRtn9IBEREREREARCteTJ0+idu3aAIDly5ejSpUq2LNnDxYvXoyFCxcaOx8REREREYAiFK45OTnQarUAgM2bN6Ndu3YAgICAAFy/ft246YiIiIiI/p/qwvWFF17AnDlzsHPnTmzatAktWrQAAFy7dg1lypQxekAiIiIiIqAIhesXX3yBb7/9Fo0bN0aXLl1QrVo1AMBvv/2mdCEgIiIiIjI21bd8bdy4MZKSkpCamorSpUsr7e+88w5sbW2NGo6IiIiIKI/qwhUALCwsDIpWAKhQoYIx8hARERERFUh1V4GEhAS89dZb8PDwQMmSJWFhYWHwICIiIiIyBdVnXHv27Im4uDiMGjUK7u7u0Gg0pshFRERERGRAdeG6a9cu7Ny5Ey+99JIJ4hARERERFUx1VwFPT0+IiCmyEBERERE9kurCddq0afjwww9x6dIlE8QhIiIiIiqY6q4CnTp1wt27d+Hr6wtbW1tYWloazL9165bRwhERERER5VFduE6bNs0EMYiIiIiIHk914RoeHm6KHEREREREj6W6jysAXLhwASNHjkSXLl2QmJgIAFi/fj1OnTpl1HBERERERHlUF67bt2/Hiy++iP3792P16tVIT08HABw7dgxjxowxekAiIiIiIqAIheuHH36ICRMmYNOmTbCyslLaQ0NDsW/fPqOGIyIiIiLKo7pwPXHiBF577bV87S4uLkhKSjJKKCIiIiKih6kuXEuVKoXr16/naz9y5AjKlStnlFBERERERA9TXbh27twZH3zwAeLj46HRaKDX67F7924MHToUPXr0ULWt2bNno2rVqtDpdNDpdAgJCcH69euV+ZmZmYiIiECZMmVgb2+PDh06ICEhQW1kIiIiIvoPUF24fvbZZwgICICnpyfS09MRFBSEhg0b4uWXX8bIkSNVbat8+fL4/PPPcejQIfz9998IDQ3Fq6++qoxOMGTIEPz+++9YsWIFtm/fjmvXruH1119XG5mIiIiI/gNUj+NqZWWFefPmYfTo0Thx4gTS09NRvXp1VKpUCRkZGbCxsSn0ttq2bWsw/emnn2L27NnYt28fypcvj/nz52PJkiUIDQ0FACxYsACBgYHYt28f6tatqzY6EREREZkx1WdcBw4cCADw9PREq1at0LFjR1SqVAl37txBq1atihwkNzcXy5Ytw507dxASEoJDhw4hJycHzZo1U5YJCAiAl5cX9u7dW+T9EBEREZF5Un3G9Y8//kDp0qUxduxYpe3OnTto0aJFkQKcOHEC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OjU11WiZiIiIiKj4qL44a8SIERg6dChOnDgBa2trrFq1CleuXEGjRo3w5ptvmiKjKhMnToSjo6Py4N27iIiIiP4bVBeuZ86cQY8ePQAAJUuWREZGBuzt7TFu3Dh88cUXRgvm5uYGAEhISDBoT0hIUOYVZMSIEUhJSVEeV65cMVomIiIiIio+qgtXOzs7pV+ru7s7Lly4oMxLSkoyWjAfHx+4ublhy5YtSltqair279+PkJCQR66n1Wqh0+kMHkRERERk/lT3ca1bty527dqFwMBAtGrVCu+//z5OnDiB1atXo27duqq2lZ6ejpiYGGU6NjYWR48ehZOTE7y8vDB48GBMmDABlSpVUobD8vDwQPv27dXGJiIiIiIzp7pwnTJlCtLT0wEAY8eORXp6On7++WdUqlRJ9YgCf//9t8GYr1FRUQCA8PBwLFy4EMOHD8edO3fwzjvvIDk5GfXr18eGDRs4hisRERHRc0hV4Zqbm4t//vkHVatWBXC/28CcOXOKvPPGjRtDRB45X6PRYNy4cRg3blyR90FERERE/w2q+rhaWFjglVdewe3bt02Vh4iIiIioQKovzqpSpQouXrxoiixERERERI+kunCdMGEChg4dirVr1+L69etITU01eBARERERmYLqi7NatWoFAGjXrh00Go3SLiLQaDTIzc01XjoiIiIiov+nunDdunWrKXIQERERET2W6sK1UaNGpshBRERERPRYqvu4AsDOnTvRvXt3vPzyy7h69SoAYNGiRdi1a5dRwxERERER5VFduK5atQphYWGwsbHB4cOHkZWVBQBISUnBZ599ZvSARERERERAEUcVmDNnDubNmwdLS0ulvV69ejh8+LBRwxERERER5VFduEZHR6Nhw4b52h0dHZGcnGyMTERERERE+aguXN3c3BATE5OvfdeuXahYsaJRQhERERERPUx14dq3b18MGjQI+/fvh0ajwbVr17B48WIMHToU/fv3N0VGIiIiIiL1w2F9+OGH0Ov1aNq0Ke7evYuGDRtCq9Vi6NChiIyMNEVGIiIiIiL1hatGo8HHH3+MYcOGISYmBunp6QgKCoK9vb0p8hERERERAShCV4GffvoJd+/ehZWVFYKCglC7dm0WrURERERkcqoL1yFDhsDFxQVdu3bFunXrkJuba4pcREREREQGVBeu169fx7Jly6DRaNCxY0e4u7sjIiICe/bsMUU+IiIiIiIARShcS5YsiTZt2mDx4sVITEzE1KlTcenSJTRp0gS+vr6myEhEREREpP7irAfZ2toiLCwMt2/fxuXLl3HmzBlj5SIiIiIiMqD6jCsA3L17F4sXL0arVq1Qrlw5TJs2Da+99hpOnTpl7HxERERERACKcMa1c+fOWLt2LWxtbdGxY0eMGjUKISEhpshGRERERKRQXbhaWFhg+fLlCAsLg4WFhcG8kydPokqVKkYLR0RERESUR3XhunjxYoPptLQ0LF26FN999x0OHTrE4bGIiIiIyCSK1McVAHbs2IHw8HC4u7vjq6++QmhoKPbt22fMbEREREREClVnXOPj47Fw4ULMnz8fqamp6NixI7KysvDLL78gKCjIVBmJiIiIiAp/xrVt27bw9/fH8ePHMW3aNFy7dg3Tp083ZTYiIiIiIkWhz7iuX78eAwcORP/+/VGpUiVTZiIiIiIiyqfQZ1x37dqFtLQ0BAcHo06dOpgxYwaSkpJMmY2IiIiISFHowrVu3bqYN28erl+/jnfffRfLli2Dh4cH9Ho9Nm3ahLS0NFPmJCIiIqLnnOpRBezs7NC7d2/s2rULJ06cwPvvv4/PP/8cLi4uaNeunSkyEhEREREVfTgsAPD398ekSZPwzz//YOnSpcbKRERERESUz1MVrnksLCzQvn17/Pbbb8bYHBERERFRPkYpXImIiIiITI2FKxERERGZBRauRERERGQWWLgSERERkVlg4UpEREREZoGFKxERERGZBRauRERERGQWWLgSERERkVlg4UpEREREZoGFKxERERGZBRauRERERGQWWLgSERERkVlg4UpEREREZoGFKxERERGZBRauRERERGQWWLgSERERkVlg4UpEREREZoGFKxERERGZBRauRERERGQWzKJwnTlzJipUqABra2vUqVMHBw4cKO5IRERERPQve+YL159//hlRUVEYM2YMDh8+jGrVqiEsLAyJiYnFHY2IiIiI/kXPfOE6ZcoU9O3bF7169UJQUBDmzJkDW1tbfP/998UdjYiIiIj+RSWLO8DjZGdn49ChQxgxYoTSVqJECTRr1gx79+4tcJ2srCxkZWUp0ykpKQCA1NRU04b9f+np6QCAq2eOI/vunX9ln/TvuHH5AoD77zGPJ3paxXE85e0P4DH1X8PjiYzt3z6m8vYhIo9f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",
      "text/plain": [
       "<Figure size 800x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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h0FERET0weBDcERERERUpjABJiIiIqIyhQkwEREREZUpTICJiIiIqEwpcQKclZUlRxxERERERG9FsRPgHTt2ICAgAJUrV4aOjg4MDQ2hVCrRtGlTTJ48GXfv3tVEnEREREREsihyArxp0yZUrVoV/fr1Q7ly5TBq1Chs3LgRu3btwrJly9C0aVPs2bMHlStXxsCBA3H//n1Nxk1EREREpJYizwM8ffp0zJkzB23btoWWVsG8uWvXrgCAO3fuYMGCBVi9ejVCQkLki5SIiIiISAZFToCPHTtWpHoVKlTA1KlT1Q6IiIiIiEiTOAsEEREREZUpar0KOTc3F5GRkdi7dy+Sk5ORl5ensn7fvn2yBEdEREREJDe1EuCvv/4akZGR8PPzQ/Xq1aFQKOSOi4iIiIhII9RKgNeuXYv169ejXbt2csdDRERERKRRao0B1tXVhYuLi9yxEBERERFpnFoJ8PDhwzFv3jwIIeSOh4iIiIhIo9QaAnH48GHs378fO3bsQLVq1aCjo6OyfuPGjbIER0REREQkN7USYDMzM3z22Wdyx0JEREREpHFqJcArVqyQOw4iIiIiordCrQQ43/379xEbGwsAcHV1hZWVlSxBERERERFpiloPwT158gT9+vWDnZ0dvL294e3tDXt7ewQGBuLp06dyx0hEREREJBu1EuDQ0FDExMRgy5YtSElJQUpKCv7880/ExMRg+PDhcsdIRERERCQbtYZA/P777/jtt9/QrFkzqaxdu3YwMDBA165dsWTJErniIyIiIiKSlVp3gJ8+fQobG5sC5dbW1hwCQURERETvNLUSYC8vL4wbNw6ZmZlSWUZGBsLDw+Hl5SVbcEREREREclNrCMS8efPg6+sLBwcH1KpVCwBw7tw56OvrY9euXbIGSEREREQkJ7US4OrVq+PatWuIiorClStXAAA9evSAv78/DAwMZA2QiIiIiEhOas8DbGhoiKCgIDljISIiIiLSuCInwJs3b0bbtm2ho6ODzZs3v7Zuhw4dShwYEREREZEmFDkB7tSpExITE2FtbY1OnTq9sp5CoUBubq4csRERERERya7ICXBeXl6hPxMRERERvU/Umgbtl19+QVZWVoHy7Oxs/PLLLyUOioiIiIhIU9RKgPv27YvU1NQC5Y8fP0bfvn1LHBQRERERkaaolQALIaBQKAqU//vvvzA1NS1y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TStyAnzmzJki1eM0aERERET0LityArx//35NxkFERERE9FZwDDARERERlSlqvwjj77//xvr165GQkIDs7GyVdRs3bixxYEREREREmqDWHeC1a9fi448/xuXLl7Fp0ybk5OTg4sWL2LdvH0xNTeWOkYiIiIhINmolwD/88APmzJmDLVu2QFdXF/PmzcOVK1fQtWtXODk5yR0jEREREZFs1EqA4+Li4OfnBwDQ1dXFkydPoFAoEBISgoiICFkDJCIiIiKSk1oJsLm5OR4/fgwAqFChAi5cuAAASElJwdOnT+WLjoiIiIhIZmo9BOft7Y3o6GjUqFEDXbp0wddff419+/YhOjoaLVu2lDtGIiIiIiLZFCsBvnDhAqpXr46FCxciMzMTAPD9999DR0cHR48eRefOnTFmzBiNBEpEREREJIdiJcA1a9ZE/fr10b9/f3Tv3h0AoKWlhW+//VYjwRERERERya1YY4BjYmJQrVo1DB8+HHZ2dggICMChQ4c0FRsRERERkeyKlQA3adIEy5cvx71797BgwQLcvHkTTZs2RdWqVTFt2jQkJiZqKk4iIiIiIlmoNQuEkZER+vbti5iYGFy9ehVdunTBokWL4OTkhA4dOsgdIxERERGRbNRKgF/k4uKC7777DmPGjIGJiQm2bdsmR1xERERERBqh1jRo+Q4ePIjly5fj999/h5aWFrp27YrAwEC5YiMiIiIikl2xE+C7d+8iMjISkZGRuH79Oj7++GPMnz8fXbt2hZGRkSZiJCIiIiKSTbES4LZt22LPnj2wtLRE79690a9fP7i6umoqNiIiIiIi2RUrAdbR0cFvv/2GTz/9FNra2pqKiYiIiIhIY4qVAG/evFlTcRARERERvRVFngVi4MCB+Pfff4tUd926dYiKilI7KCIiIiIiTSnyHWArKytUq1YNjRs3Rvv27VGvXj3Y29tDX18fjx49wqVLl3D48GGsXbsW9vb2iIiI0GTcRERERERqKXICPHHiRAwePBjLli3D4sWLcenSJZX1JiYm8PHxQUREBNq0aSN7oEREREREcijWGGAbGxt8//33+P777/Ho0SMkJCQgIyMDlpaWqFKlChQKhabiJCIiIiKShdovwjA3N4e5ubmcsRARERERaVyJX4VMRERERPQ+YQJMRERERGUKE2AiIiIiKlOYABMRERFRmaJWAtyiRQuk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dskaIBERERGRnNRKgKtXr45r164hKioKV65cAQD06NED/v7+MDAwkDVAIiIiIiI5qT0PsKGhIYKCguSMhYiIiIhI44o1BvjUqVNo3rw50tLSCqxLTU1F8+bNce7cOdmCIyIiIiKSW7ES4FmzZqFFixZQKpUF1pmamqJVq1aYMWOGbMEREREREcmtWAnw8ePH0bFjx1eub9++PY4ePVrioIiIiIiINKVYCfCdO3dgYmLyyvXGxsa4d+9eiYMiIiIiItKUYiXAVlZWiI2NfeX6K1euwNLSssRBERERERFpSrESYB8fH0yePLnQdUIITJ48GT4+PrIERkRERESkCcWaBm3MmDHw9PREw4YNMXz4cLi6ugJ4fud31qxZuHr1KiIjIzURJxERERGRLIqVAFepUgV79uxBnz590L17dygUCgDP7/56eHggOjoaLi4uGgmUiIiIiEgOxX4RRr169XDhwgWcPXsW165dgxACVatWRe3atTUQHhERERGRvNR+E1zt2rWZ9BIRERHRe6dYD8EREREREb3vmAATERERUZnCBJiIiIiIyhQmwERERERUpqj9EFxKSgpOnDiB5ORk5OXlqazr3bt3iQMjIiIiItIEtRLgLVu2wN/fH+np6VAqldJ8wACgUCiYABMRERHRO0utIRDDhw9Hv379kJ6ejpSUFDx69Ej6PHz4UO4YiYiIiIhko1YCfOfOHQwdOhSGhoZyx0NEREREpFFqJcC+vr74+++/5Y6FiIiIiEjj1BoD7OfnhxEjRuDSpUuoUaMGdHR0VNZ36NBBluCIiIiIiOSmVgIcFBQEAJgwYUKBdQqFArm5uSWLioiIiIhIQ9RKgF+e9oyIiIiI6H1R4hdhZGZmyhEHEREREdFboVYCnJubi4kTJ6JChQowNjbGjRs3AABjx47Fzz//LGuARERERERyUisBnjx5MiIjIzF9+nTo6upK5dWrV8eyZctkC46IiIiISG5qJcC//PILIiIi4O/vD21tbam8Vq1auHLlimzBERERERHJTe0XYbi4uBQoz8vLQ05OTomDIiIiIiLSFLUSYA8PDxw6dKhA+W+//YY6deqUOCgiIiIiIk1Raxq0sLAwBAQE4M6dO8jLy8PGjRsRGxuLX375BVu3bpU7RiIiIiIi2ah1B7hjx47YsmUL9uzZAyMjI4SFheHy5cvYsmULWrVqJXeMRERERESyUesO8L///osmTZogOjq6wLq//voLjRo1KnFgRERERESaoNYd4NatW+Phw4cFyo8cOYI2bdqUOCgiIiIiIk1RKwFu1KgRWrdujcePH0tlBw8eRLt27TBu3DjZgiMiIiIikptaCfCyZcvg5OSE9u3bIysrC/v374efnx8mTJiAkJAQuWMkIiIiIpKNWgmwlpYW1q5dCx0dHbRo0QIdOnTAlClT8PXXX8sdHxERERGRrIr8ENz58+cLlI0fPx49evTAl19+CW9vb6lOzZo15YuQiIiIiEhGRU6Aa9euDYVCASGEVJa//OOPPyIiIgJCCCgUCuTm5mokWCIiIiKikipyAhwfH6/JOIiIiIiI3ooiJ8DOzs6ajIOIiIiI6K1Q6yE4AIiLi8OQIUPg4+MDHx8fDB06FHFxcWoHMnXqVCgUCgwbNkwqy8zMRHBwMMqXLw9jY2N07twZSUlJKtslJCTAz88PhoaGsLa2xogRI/Ds2TOVOgcOHEDdunWhp6cHFxcXREZGqh0nEREREb3f1EqAd+3aBQ8PD5w4cQI1a9ZEzZo1cfz4cVSrVq3Qt8O9ycmTJ/Hjjz8WeHguJCQEW7ZswYYNGxATE4O7d+/i888/l9bn5ubCz88P2dnZOHr0KFauXInIyEiEhYVJdeLj4+Hn54fmzZvj7NmzGDZsGPr3749du3apc+hERERE9J5T61XI3377LUJCQjB16tQC5aNGjUKrVq2K3FZ6ejr8/f3x008/YdKkSVJ5amoqfv75Z6xZswYtWrQAAKxYsQLu7u7S65Z3796NS5cuYc+ePbCxsUHt2rUxceJEjBo1CuPHj4euri6WLl2KSpUqYdasWQAAd3d3HD58GHPmzIGvr686h09ERERE7zG17gBfvnwZgYGBBcr79euHS5cuFaut4OBg+Pn5wcfHR6X81KlTyMnJUSl3c3ODk5MTjh07BgA4duwYatSoARsbG6mOr68v0tLScPHiRanOy237+vpKbRARERFR2aLWHWArKyucPXsWH330kUr52bNnYW1tXeR21q5di9OnT+PkyZMF1iUmJkJXVxdmZmYq5TY2NkhMTJTqvJj85q/PX/e6OmlpacjIyICBgUGBfWdlZSErK0taTktLK/IxEREREdG7rVgJ8IQJE/DNN98gKCgIAwYMwI0bN/Dxxx8DAI4cOYJp06YhNDS0SG3dvn0bX3/9NaKjo6Gvr1/8yDVoypQpCA8PL+0wiIiIiEgDijUEIjw8HOnp6Rg7dizCwsKwYMECNG3aFE2bNsXChQsxfvx4jBkzpkhtnTp1CsnJyahbty7KlSuHcuXKISYmBvPnz0e5cuVgY2OD7OxspKSkqGyXlJQEW1tbAICtrW2BWSHyl99UR6lUFnr3FwBGjx6N1NRU6XP79u0iHRMRERERvfuKdQc4/y1wCoUCISEhCAkJwePHjwEAJiYmxdpxy5Yt8c8//6iU9e3bF25ubhg1ahQcHR2ho6ODvXv3onPnzgCA2NhYJCQkwMvLCwDg5eWFyZMnIzk5WRp6ER0dDaVSCQ8PD6nO9u3bVfYTHR0ttVEYPT096OnpFet4iIiIiOj9UOwxwAqFQmW5uInvi9tVr15dpczIyAjly5eXygMDAxEaGgoLCwsolUoMGTIEXl5eaNSoEQCgdevW8PDwQK9evTB9+nQkJiZizJgxCA4OlhLYgQMHYuHChRg5ciT69euHffv2Yf369di2bZtacRMRERHR+63YCXDVqlULJMEve/jwodoBvWjOnDnQ0tJC586dkZWVBV9fXyxevFhar62tja1bt2LQoEHw8vKCkZERAgICMGHCBKlOpUqVsG3bNoSEhGDevHlwcHDAsmXLOAUaERERURlV7AQ4PDwcpqammogFBw4cUFnW19fHokWLsGjRoldu4+zsXGCIw8uaNWuGM2fOyBEiEREREb3nip0Ad+/evVhTnRERERERvUuKNQvEm4Y+EBERERG964qVAOfPAkFERERE9L4q1hCIvLw8TcVBRERERPRWFOsOMBERERHR+44JMBERERGVKUyAiYiIiKhMYQJMRERERGVKsR6CO3jwoMqyt7e3rMEQEREREWlasRLggIAA6WeFQoEbN27IHhARERERkSYVKwGOj4/XVBxERERERG8FxwATERERUZlSogQ4MzMTmzdvxpMnT+SKh4iIiIhIo0qUAP/222/47LPPEBUVJVc8REREREQaVaIEeOXKlahUqRJWrFghVzxERERERBqldgL877//IiYmBr/++itOnz6Nq1evyhkXEREREZFGqJ0Ar1q1Ch9//DHq168PX19frFy5Us64iIiIiIg0Qu0EeOXKlejVqxcAoFevXli9erVsQRERERERaYpaCfBff/2F27dvo2vXrgCADh06IC0tDXv37pU1OCIiIiIiuamVAK9cuRIdOnSAiYkJAEBPTw9dunRBZGSknLEREREREcmu2AlwVlYW1q1bh969e6uU9+rVCxs3bkR6erpswRERERERya3YCfDjx48xd+5c+Pr6qpQ3adIEP/74IxNgIiIiInqnlSvuBpaWlgXu/ub78ssvSxwQEREREZEmqTUG+Ndff33luhEjRqgdDBERERGRpqmVAA8aNAg7duwoUB4SEsLp0IiIiIjonaZWAhwVFYUePXrg8OHDUtmQIUOwfv167N+/X7bgiIiIiIjkplYC7Ofnh8WLF6NDhw44deoUvvrqK2zcuBH79++Hm5ub3DESEREREcmm2A/B5evZsydSUlLQuHFjWFlZISYmBi4uLnLGRkREREQkuyInwKGhoYWWW1lZoW7duli8eLFUNnv27JJHRkRERESkAUVOgM+cOVNouYuLC9LS0qT1CoVCnsiIiIiIiDSgyAkwH24jIiIiog+BWg/BERERERG9r9R6CO7JkyeYOnUq9u7di+TkZOTl5amsv3HjhizBERERERHJTa0EuH///oiJiUGvXr1gZ2fHcb9ERERE9N5QKwHesWMHtm3bhsaNG8sdDxERERGRRqk1Btjc3BwWFhZyx0JEREREpHFqJcATJ05EWFgYnj59Knc8REREREQapdYQiFmzZiEuLg42NjaoWLEidHR0VNafPn1aluCIiIiIiOSmVgLcqVMnmcMgIiIiIno71EqAx40bJ3ccRERERERvBV+EQURERERlilp3gLW0tF47929ubq7aARERERERaZJaCfCmTZtUlnNycnDmzBmsXLkS4eHhsgRGRERERKQJaiXAHTt2LFD2xRdfoFq1ali3bh0CAwNLHBgRERERkSbIOga4UaNG2Lt3r5xNEhERERHJSrYEOCMjA/Pnz0eFChXkapKIiIiISHZqDYEwNzdXeQhOCIHHjx/D0NAQq1evli04IiIiIiK5qZUAz507V2VZS0sLVlZWaNiwIczNzeWIi4iIiIhII9RKgAMCAuSOg4iIiIjorSj2GOC8vDw8fvy40HXp6emcA5iIiIiI3mnFToCTk5NRvnx5XLp0SaX85s2bMDc3R0JCgmzBERERERHJrdgJsK2tLXx8fLBy5UqV8tWrV8PLywuVKlWSLTgiIiIiIrmpNQ1aQEAA1qxZo1K2atUq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",
      "text/plain": [
       "<Figure size 800x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Advantages of BPE Tokenization:\n",
      " - Breaks words into subwords, reducing the number of out-of-vocabulary tokens.\n",
      " - Can better handle morphological variations and rare words.\n",
      " - Often improves model performance when dealing with large vocabularies.\n",
      "\n",
      "Disadvantages of BPE Tokenization:\n",
      " - More complex to implement and train compared to simple whitespace tokenization.\n",
      " - Requires tuning the number of merge operations.\n",
      " - May produce subword tokens that are less interpretable by humans.\n"
     ]
    }
   ],
   "source": [
    "merge_values = [50, 100, 200]  # You can adjust these values as needed.\n",
    "bpe_results = {}   # To store statistics for each BPE tokenizer.\n",
    "\n",
    "for num_merges in merge_values:\n",
    "    # Train the BPE tokenizer using num_merges merge operations.\n",
    "    bpe_vocab_temp, updated_corpus_temp, bpe_merges_temp = bpe(bpe_init_vocab, bpe_corpus, num_merges=num_merges)\n",
    "    \n",
    "    # Tokenize the validation set using the current BPE tokenizer.\n",
    "    bpe_token_counts = []\n",
    "    bpe_unknown_count = 0\n",
    "    for ex in tweet_ds['validation']:\n",
    "        tokens = apply_bpe_tokenization(ex['clean'], bpe_vocab_temp, bpe_merges_temp, unk_token='<unk>')\n",
    "        bpe_token_counts.append(len(tokens))\n",
    "        bpe_unknown_count += tokens.count('<unk>')\n",
    "    \n",
    "    avg_bpe_tokens = np.mean(bpe_token_counts)\n",
    "    bpe_results[num_merges] = {\n",
    "        'avg_tokens': avg_bpe_tokens,\n",
    "        'unk_count': bpe_unknown_count\n",
    "    }\n",
    "\n",
    "# For the word-level tokenizer, we assume that we have already created a 'tokens' field \n",
    "# using simple whitespace splitting and replacing unknown words.\n",
    "word_token_counts = [len(ex['tokens']) for ex in tweet_ds['validation']]\n",
    "avg_word_tokens = np.mean(word_token_counts)\n",
    "word_unk_count = sum(ex['tokens'].count('<unk>') for ex in tweet_ds['validation'])\n",
    "\n",
    "# Print word-level tokenization results.\n",
    "print(\"Word-level Tokenization (Validation):\")\n",
    "print(f\" Average number of tokens: {avg_word_tokens:.2f}\")\n",
    "print(f\" Total '<unk>' tokens: {word_unk_count}\")\n",
    "\n",
    "# Print BPE tokenizer results.\n",
    "print(\"\\nBPE Tokenization Results:\")\n",
    "for num_merges, stats in bpe_results.items():\n",
    "    print(f\" {num_merges} merges: Average tokens = {stats['avg_tokens']:.2f}, <unk> count = {stats['unk_count']}\")\n",
    "\n",
    "# (Optional) Plot the comparison in bar charts.\n",
    "# Plot average token counts for word-level and BPE tokenizers.\n",
    "labels = ['Word-level'] + [f'{m} merges' for m in merge_values]\n",
    "avg_tokens_values = [avg_word_tokens] + [bpe_results[m]['avg_tokens'] for m in merge_values]\n",
    "\n",
    "plt.figure(figsize=(8, 4))\n",
    "plt.bar(labels, avg_tokens_values, color='skyblue', edgecolor='black')\n",
    "plt.ylabel(\"Average Number of Tokens per Tweet\")\n",
    "plt.title(\"Comparison of Average Token Count\")\n",
    "plt.show()\n",
    "\n",
    "# Plot unknown token counts for word-level and BPE tokenizers.\n",
    "unk_values = [word_unk_count] + [bpe_results[m]['unk_count'] for m in merge_values]\n",
    "\n",
    "plt.figure(figsize=(8, 4))\n",
    "plt.bar(labels, unk_values, color='salmon', edgecolor='black')\n",
    "plt.ylabel(\"Total '<unk>' Token Count (Validation)\")\n",
    "plt.title(\"Comparison of Unknown Token Counts\")\n",
    "plt.show()\n",
    "\n",
    "# ------------------------------\n",
    "# Advantages and Disadvantages Discussion:\n",
    "# ------------------------------\n",
    "print(\"\\nAdvantages of BPE Tokenization:\")\n",
    "print(\" - Breaks words into subwords, reducing the number of out-of-vocabulary tokens.\")\n",
    "print(\" - Can better handle morphological variations and rare words.\")\n",
    "print(\" - Often improves model performance when dealing with large vocabularies.\")\n",
    "\n",
    "print(\"\\nDisadvantages of BPE Tokenization:\")\n",
    "print(\" - More complex to implement and train compared to simple whitespace tokenization.\")\n",
    "print(\" - Requires tuning the number of merge operations.\")\n",
    "print(\" - May produce subword tokens that are less interpretable by humans.\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
